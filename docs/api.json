[
  {
    "kind": "module",
    "path": "/mod.ts",
    "items": [
      {
        "kind": "typeAlias",
        "name": "Options",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
          "line": 16,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "LDkit options and query engine context\n\nLDkit-specific options are:\n- `engine` - a query engine to use for querying data sources\n- `language` - a preferred language for literals\n- `take` - a default number of results to take (limit of SELECT queries)\n- `logQuery` - a function that will be called for each SPARQL query"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "engine",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "IQueryEngine",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "IQueryEngine"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "language",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "take",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "logQuery",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "query",
                              "optional": false,
                              "tsType": {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "Partial",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  ],
                  "typeName": "Partial"
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "kind": "function",
        "name": "setGlobalOptions",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
          "line": 53,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Sets global configuration {@link Options} for LDkit that will be used\nby default in all queries, unless overridden in {@link Lens}.\n\nLDkit-specific options are:\n- `engine` - a query engine to use for querying data sources\n- `language` - a preferred language for literals\n- `take` - a default number of results to take (limit of SELECT queries)\n- `logQuery` - a function that will be called for each SPARQL query\n\nDefault values for these options are:\n```typescript\nconst defaultOptions = {\n  engine: new QueryEngine(),\n  take: 1000,\n  logQuery: () => {},\n};\n```\nThe default configuration uses built-in {@link QueryEngine}. Language is not set by default.\n",
          "tags": [
            {
              "kind": "param",
              "name": "options",
              "doc": "LDkit options and query engine context"
            }
          ]
        },
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "options",
              "optional": false,
              "tsType": {
                "repr": "Options",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Options"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "Identity",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 64,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Object that contains IRI of an entity"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "methods": [],
              "properties": [
                {
                  "name": "$id",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "IRI",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "IRI"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "Property",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
          "line": 8,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Data property prototype that describes RDF predicate of a data entity.\nIncludes specification of other metadata, such as whether the property\nis optional, array, inverse, or whether it is a nested data entity, etc."
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "methods": [],
              "properties": [
                {
                  "name": "@id",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "@type",
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "keyof",
                      "tsType": {
                        "repr": "SupportedDataTypes",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "SupportedDataTypes"
                        }
                      }
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@schema",
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "Schema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Schema"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@optional",
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@array",
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@multilang",
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@inverse",
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "Schema",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
          "line": 22,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Data schema prototype that describes a data entity. Includes an optional\nspecification of RDF type and a map of RDF properties."
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "@type",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [],
                  "callSignatures": [],
                  "indexSignatures": [
                    {
                      "readonly": false,
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "key",
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Property",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Property"
                            }
                          },
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "SchemaInterface",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 74,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Describes a data model of a data entity according to its schema,. as resolved\nby LDkit, i.e. the shape of data that LDkit returns when querying for entities.\n\nSee {@link Lens.prototype.find} for usage example."
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Identity",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Identity"
                }
              },
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "X",
                    "constraint": {
                      "repr": "Exclude",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "keyof",
                              "tsType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "T"
                                }
                              }
                            }
                          },
                          {
                            "repr": "@type",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "@type"
                            }
                          }
                        ],
                        "typeName": "Exclude"
                      }
                    }
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "T"
                            }
                          },
                          "indexType": {
                            "repr": "X",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "X"
                            }
                          }
                        }
                      },
                      "extendsType": {
                        "repr": "ValidPropertyDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "ValidPropertyDefinition"
                        }
                      },
                      "trueType": {
                        "repr": "ConvertProperty",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "T"
                                  }
                                },
                                "indexType": {
                                  "repr": "X",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "X"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "ConvertProperty"
                        }
                      },
                      "falseType": {
                        "repr": "never",
                        "kind": "keyword",
                        "keyword": "never"
                      }
                    }
                  }
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "typeAlias",
        "name": "SchemaSearchInterface",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 152,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Describes a shape of data for updating an entity, according to its data schema.\n\nSee {@link Lens.prototype.find} for usage example."
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "$id",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "IRI",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "IRI"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "IRI",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "IRI"
                              }
                            }
                          }
                        ]
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "SchemaSearchInterfaceProperties",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "SchemaSearchInterfaceProperties"
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "typeAlias",
        "name": "SchemaUpdateInterface",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 116,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Describes a shape of data for updating an entity, according to its data schema.\n\nSee {@link Lens.prototype.update} for usage example."
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Identity",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Identity"
                }
              },
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "X",
                    "constraint": {
                      "repr": "Exclude",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "keyof",
                              "tsType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "T"
                                }
                              }
                            }
                          },
                          {
                            "repr": "@type",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "@type"
                            }
                          }
                        ],
                        "typeName": "Exclude"
                      }
                    }
                  },
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "T"
                            }
                          },
                          "indexType": {
                            "repr": "X",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "X"
                            }
                          }
                        }
                      },
                      "extendsType": {
                        "repr": "ValidPropertyDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "ValidPropertyDefinition"
                        }
                      },
                      "trueType": {
                        "repr": "ConvertUpdateProperty",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "T"
                                  }
                                },
                                "indexType": {
                                  "repr": "X",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "X"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "ConvertUpdateProperty"
                        }
                      },
                      "falseType": {
                        "repr": "never",
                        "kind": "keyword",
                        "keyword": "never"
                      }
                    }
                  }
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "typeAlias",
        "name": "SupportedDataTypes",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/data_types.ts",
          "line": 7,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Map of supported RDF data types and their JavaScript native counterparts"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "methods": [],
              "properties": [
                {
                  "name": "[xsd.dateTime]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "Date",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Date"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.date]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "Date",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Date"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.gDay]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "Date",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Date"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.gMonthDay]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "Date",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Date"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.gYear]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "Date",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Date"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.gYearMonth]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "Date",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Date"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.boolean]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.double]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.decimal]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.float]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.integer]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.long]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.int]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.byte]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.short]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.negativeInteger]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.nonNegativeInteger]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.nonPositiveInteger]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.positiveInteger]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.unsignedByte]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.unsignedInt]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.unsignedLong]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.unsignedShort]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.string]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.normalizedString]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.anyURI]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.base64Binary]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.language]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.Name]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.NCName]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.NMTOKEN]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.token]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.hexBinary]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[rdf.langString]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.time]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[xsd.duration]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "[ldkit.IRI]",
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "IRI",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "IRI"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "kind": "function",
        "name": "createLens",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
          "line": 75,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Creates an instance of Lens that lets you query and update RDF data\nvia data schema using TypeScript native data types.\n\nIn order to create a Lens instance, you need to provide a data schema\nthat describes the data model which serves to translate data between\nLinked Data and TypeScript native types (see {@link Schema} for details).\n\nYou can also pass a set of options for LDkit and a query engine that\nspecify the data source, preferred language, etc. (see {@link Options} for details).\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { createLens, type Options } from \"ldkit\";\nimport { dbo, rdfs, xsd } from \"ldkit/namespaces\";\n\n// Create options for query engine\nconst options: Options = {\n  sources: [\"https://dbpedia.org/sparql\"], // SPARQL endpoint\n  language: \"en\", // Preferred language\n};\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": dbo.Person,\n  name: rdfs.label,\n  abstract: dbo.abstract,\n  birthDate: {\n    \"@id\": dbo.birthDate,\n    \"@type\": xsd.date,\n  },\n} as const;\n\n// Create a resource using the data schema and options above\nconst Persons = createLens(PersonSchema, options);\n\n// List some persons\nconst persons = await Persons.find({ take: 10 });\nfor (const person of persons) {\n  console.log(person.name); // string\n  console.log(person.birthDate); // Date\n}\n\n// Get a particular person identified by IRI\nconst ada = await Persons.findByIri(\"http://dbpedia.org/resource/Ada_Lovelace\");\nconsole.log(ada?.name); // string \"Ada Lovelace\"\nconsole.log(ada?.birthDate); // Date object of 1815-12-10\n```\n"
            },
            {
              "kind": "param",
              "name": "schema",
              "doc": "data schema which extends {@link Schema}"
            },
            {
              "kind": "param",
              "name": "options",
              "doc": "optional {@link Options} - contains LDkit and query engine configuration"
            },
            {
              "kind": "return",
              "doc": "Lens instance that provides interface to Linked Data based on the schema"
            }
          ]
        },
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "schema",
              "optional": false,
              "tsType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "T"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "Options",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Options"
                }
              }
            }
          ],
          "returnType": {
            "repr": "Lens",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "T"
                  }
                }
              ],
              "typeName": "Lens"
            }
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "class",
        "name": "Lens",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
          "line": 87,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Lens provides an interface to Linked Data based on the data schema.\n\nFor the best developer experience, use the {@link createLens} function to create the instance."
        },
        "classDef": {
          "isAbstract": false,
          "constructors": [
            {
              "hasBody": true,
              "name": "constructor",
              "params": [
                {
                  "kind": "identifier",
                  "name": "schema",
                  "optional": false,
                  "tsType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "T"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "Options",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Options"
                    }
                  }
                }
              ],
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 93,
                "col": 2
              }
            }
          ],
          "properties": [
            {
              "tsType": {
                "repr": "ExpandedSchema",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "ExpandedSchema"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "schema",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 88,
                "col": 2
              }
            },
            {
              "tsType": {
                "repr": "Options",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Options"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "options",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 89,
                "col": 2
              }
            },
            {
              "tsType": {
                "repr": "QueryEngineProxy",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "QueryEngineProxy"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "engine",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 90,
                "col": 2
              }
            },
            {
              "tsType": {
                "repr": "QueryBuilder",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "QueryBuilder"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryBuilder",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 91,
                "col": 2
              }
            }
          ],
          "indexSignatures": [],
          "methods": [
            {
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "decode",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "graph",
                    "optional": false,
                    "tsType": {
                      "repr": "Graph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Graph"
                      }
                    }
                  }
                ],
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 101,
                "col": 2
              }
            },
            {
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "log",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 107,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Returns the total number of entities corresponding to the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Count all persons\nconst count = await Persons.count(); // number\n```\n"
                  },
                  {
                    "kind": "return",
                    "doc": "total number of entities corresponding to the data schema"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "count",
              "kind": "method",
              "functionDef": {
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 134,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Find entities with a custom SPARQL query.\n\nThe query must be a CONSTRUCT query, and the root nodes must be of type `ldkit:Resource`.\nSo that the decoder can decode the results, the query must also return all properties\naccording to the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { ldkit, schema } from \"ldkit/namespaces\";\nimport { CONSTRUCT } from \"ldkit/sparql\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Query to find all persons named \"Doe\"\nconst query = CONSTRUCT`?s a <${ldkit.Resource}>; <${schema.name}> ?name`\n  .WHERE`?s <${schema.name}> ?name; <${schema.familyName}> \"Doe\"`.build();\n\n// Find all persons that match the custom query\nconst doePersons = await Persons.query(query);\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "sparqlConstructQuery",
                    "doc": "CONSTRUCT SPARQL query"
                  },
                  {
                    "kind": "return",
                    "doc": "Found entities"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "query",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "sparqlConstructQuery",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Unite",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "SchemaInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaInterface"
                                }
                              }
                            ],
                            "typeName": "Unite"
                          }
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 174,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Find entities that match the given search criteria.\n\nThe search criteria is a JSON object that may contain properties from the data schema.\nIn addition you can specify how many results to return and how many to skip\nfor pagination purposes.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Find 100 persons with name that starts with \"Ada\"\nconst persons = await Persons.find({\n  where: {\n    name: { $strStarts: \"Ada\" },\n  },\n  take: 100,\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "options",
                    "doc": "Search criteria and pagination options"
                  },
                  {
                    "kind": "return",
                    "doc": "entities that match the given search criteria"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "find",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "assign",
                    "left": {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [
                            {
                              "name": "where",
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "",
                                "kind": "union",
                                "union": [
                                  {
                                    "repr": "SchemaSearchInterface",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "T",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeName": "T"
                                          }
                                        }
                                      ],
                                      "typeName": "SchemaSearchInterface"
                                    }
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "",
                                    "kind": "array",
                                    "array": {
                                      "repr": "RDF.Quad",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Quad"
                                      }
                                    }
                                  }
                                ]
                              },
                              "typeParams": []
                            },
                            {
                              "name": "take",
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            },
                            {
                              "name": "skip",
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    },
                    "right": "[UNSUPPORTED]"
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Unite",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "SchemaInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaInterface"
                                }
                              }
                            ],
                            "typeName": "Unite"
                          }
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 215,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Find one entity that matches the given search criteria.\n\nThe search criteria is a JSON object that may contain properties from the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Find one person with name that starts with \"Ada\"\nconst person = await Persons.findOne({\n  name: { $strStarts: \"Ada\" },\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "options",
                    "doc": "Search criteria and pagination options"
                  },
                  {
                    "kind": "return",
                    "doc": "entities that match the given search criteria"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "findOne",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "where",
                    "optional": true,
                    "tsType": {
                      "repr": "SchemaSearchInterface",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "SchemaSearchInterface"
                      }
                    }
                  }
                ],
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 266,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Find a single entity that matches the given IRI.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Get a particular person identified by IRI\nconst ada = await Persons.findByIri(\"http://dbpedia.org/resource/Ada_Lovelace\");\nconsole.log(ada?.name); // string \"Ada Lovelace\"\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "iri",
                    "doc": "IRI of the entity to find"
                  },
                  {
                    "kind": "return",
                    "doc": "Entity if found, null otherwise"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "findByIri",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "iri",
                    "optional": false,
                    "tsType": {
                      "repr": "IRI",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "IRI"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Unite",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "SchemaInterface",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "T"
                                        }
                                      }
                                    ],
                                    "typeName": "SchemaInterface"
                                  }
                                }
                              ],
                              "typeName": "Unite"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 296,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Find entities that match the given IRIs.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Get specific persons identified by IRIs\nconst matches = await Persons.findByIris([\n  \"http://dbpedia.org/resource/Ada_Lovelace\",\n  \"http://dbpedia.org/resource/Alan_Turing\"\n]);\nconsole.log(matches[0].name); // string \"Ada Lovelace\"\nconsole.log(matches[1].name); // string \"Alan Turing\"\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "iris",
                    "doc": "IRIs of the entities to find"
                  },
                  {
                    "kind": "return",
                    "doc": "Array of found entities, empty array if there are no matches"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "findByIris",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "iris",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "IRI",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "IRI"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Unite",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "SchemaInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaInterface"
                                }
                              }
                            ],
                            "typeName": "Unite"
                          }
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 330,
                "col": 2
              }
            },
            {
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "updateQuery",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 337,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Inserts one or more entities to the data store.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Insert a new person\nawait Persons.insert({\n  $id: \"http://example.org/Alan_Turing\",\n  name: \"Alan Turing\",\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "entities",
                    "doc": "Entities to insert"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "insert",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "entities",
                      "optional": false
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "Entity",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "SchemaInterface",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "T"
                                    }
                                  }
                                ],
                                "typeName": "SchemaInterface"
                              }
                            }
                          ],
                          "typeName": "Entity"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 369,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Inserts raw RDF quads to the data store.\n\nThis method is useful when you need to insert data that is not covered by the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Create a custom quad to insert\nconst df = new DataFactory();\nconst quad = df.quad(\n  df.namedNode(\"http://example.org/Alan_Turing\"),\n  df.namedNode(\"http://schema.org/name\"),\n  df.literal(\"Alan Turing\"),\n);\n\n// Insert the quad\nawait Persons.insertData(quad);\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "quads",
                    "doc": "Quads to insert to the data store"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "insertData",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "quads",
                      "optional": false
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "RDF.Quad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "RDF.Quad"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 409,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Updates one or more entities in the data store.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Update Alan Turing's name\nawait Persons.update({\n  $id: \"http://example.org/Alan_Turing\",\n  name: \"Not Alan Turing\",\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "entities",
                    "doc": "Partial entities to update"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "update",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "entities",
                      "optional": false
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "SchemaUpdateInterface",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "T"
                              }
                            }
                          ],
                          "typeName": "SchemaUpdateInterface"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 441,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Deletes one or more entities from the data store.\n\nThis method accepts IRIs of the entities to delete and attemps\nto delete all triples from the database that corresponds to\nthe data schema. Other triples that are not covered by the data\nschema will not be deleted.\n\nIf you need to have more control of what triples to delete,\nuse {@link deleteData} instead.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Delete a person\nawait Persons.delete(\"http://example.org/Alan_Turing\");\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "identities",
                    "doc": "Identities or IRIs of the entities to delete"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "delete",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "identities",
                      "optional": false
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Identity",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Identity"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "IRI",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "IRI"
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 478,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Deletes raw RDF quads from the data store.\n\nThis method is useful when you need to delete data that is not covered by the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema and context above\nconst Persons = createLens(PersonSchema);\n\n// Create a custom quad to insert\nconst df = new DataFactory();\nconst quad = df.quad(\n  df.namedNode(\"http://example.org/Alan_Turing\"),\n  df.namedNode(\"http://schema.org/name\"),\n  df.literal(\"Alan Turing\"),\n);\n\n// Delete the quad\nawait Persons.deleteData(quad);\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "quads",
                    "doc": "Quads to delete from the data store"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "deleteData",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "quads",
                      "optional": false
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "RDF.Quad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "RDF.Quad"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 522,
                "col": 2
              }
            }
          ],
          "implements": [],
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Schema"
                }
              }
            }
          ],
          "superTypeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "Namespace",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 2,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Original type of namespace specification"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "methods": [],
              "properties": [
                {
                  "name": "iri",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "prefix",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "terms",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "NamespaceInterface",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 9,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Resulting type of namespace providing access to all terms, prefix and IRI"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "Term",
                    "constraint": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "terms",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "terms"
                              }
                            }
                          }
                        },
                        "indexType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    }
                  },
                  "tsType": {
                    "repr": "${NamespaceSpec[\"prefix\"]}${Term}",
                    "kind": "literal",
                    "literal": {
                      "kind": "template",
                      "tsTypes": [
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "prefix",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "prefix"
                              }
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "$prefix",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "prefix",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prefix"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "$iri",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "iri",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "iri"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "NamespaceSpec",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "function",
        "name": "createNamespace",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 46,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Creates a strongly typed container for Linked Data vocabulary to provide\ntype safe access to all vocabulary terms as well as IDE autocompletion.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { createNamespace } from \"ldkit\";\n\nconst onto = createNamespace(\n  {\n    iri: \"http://www.example.com/ontology#\",\n    prefix: \"onto:\",\n    terms: [\n      \"object\",\n      \"predicate\",\n      \"subject\",\n    ],\n  } as const,\n);\n\nconsole.log(onto.subject); // prints http://www.example.com/ontology#subject\nconsole.log(onto.unknown); // TypeScript error! This term does not exist\n```\n"
            },
            {
              "kind": "param",
              "name": "namespaceSpec",
              "doc": "Specification of the namespace"
            },
            {
              "kind": "return"
            }
          ]
        },
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "namespaceSpec",
              "optional": false,
              "tsType": {
                "repr": "N",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "N"
                }
              }
            }
          ],
          "returnType": {
            "repr": "NamespaceInterface",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "N",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "N"
                  }
                }
              ],
              "typeName": "NamespaceInterface"
            }
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "N",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "class",
        "name": "QueryEngine",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
          "line": 22,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "A query engine that can query a SPARQL endpoint.\n\nImplements {@link IQueryEngine} interface.\n\nThis engine is used by default if no other engine is configured.\nSee {@link Options} for more details.\n\nIf you need to query other data sources, or multiple SPARQL endpoints,\nyou can use [Comunica](https://comunica.dev) instead, extend this engine,\nor implement your own."
        },
        "classDef": {
          "isAbstract": false,
          "constructors": [],
          "properties": [],
          "indexSignatures": [],
          "methods": [
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "getSparqlEndpoint",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 23,
                "col": 2
              }
            },
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "getFetch",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "fetch",
                  "kind": "typeQuery",
                  "typeQuery": "fetch"
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 57,
                "col": 2
              }
            },
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "query",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "responseType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Response",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Response"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 61,
                "col": 2
              }
            },
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryAndResolve",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "type",
                    "optional": false,
                    "tsType": {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "T"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": [
                  {
                    "name": "T",
                    "constraint": {
                      "repr": "ResolverType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ResolverType"
                      }
                    }
                  }
                ]
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 80,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL SELECT query and returns a stream of bindings.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Stream of bindings"
                  }
                ]
              },
              "accessibility": "public",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryBindings",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RDF.ResultStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "RDF.Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Bindings"
                              }
                            }
                          ],
                          "typeName": "RDF.ResultStream"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 109,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL ASK query and returns a boolean result.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Boolean result"
                  }
                ]
              },
              "accessibility": "public",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryBoolean",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 123,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL CONSTRUCT query and returns a stream of quads.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Stream of quads"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryQuads",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RDF.ResultStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "RDF.Quad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Quad"
                              }
                            }
                          ],
                          "typeName": "RDF.ResultStream"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 137,
                "col": 2
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL UPDATE query and returns nothing.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryVoid",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 151,
                "col": 2
              }
            }
          ],
          "implements": [
            {
              "repr": "IQueryEngine",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "IQueryEngine"
              }
            }
          ],
          "typeParams": [],
          "superTypeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "QueryContext",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/types.ts",
          "line": 24,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "A set of context entries that can be passed to a query engine,\nsuch as data sources, fetch configuration, etc.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { QueryContext, QueryEngine } from \"ldkit\";\n\nconst context: QueryContext = {\n  sources: [\"https://dbpedia.org/sparql\"],\n};\n\nconst engine = new QueryEngine();\nawait engine.queryBoolean(\"ASK { ?s ?p ?o }\", context);\n```"
            }
          ]
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "RDF.QueryStringContext",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "RDF.QueryStringContext"
                }
              },
              {
                "repr": "RDF.QuerySourceContext",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "IDataSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "IDataSource"
                      }
                    }
                  ],
                  "typeName": "RDF.QuerySourceContext"
                }
              },
              {
                "repr": "IQueryContextCommon",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "IQueryContextCommon"
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "IQueryEngine",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/types.ts",
          "line": 32,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Interface of a query engine compatible with LDkit"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "RDF.StringSparqlQueryable",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "RDF.SparqlResultSupport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "RDF.SparqlResultSupport"
                  }
                },
                {
                  "repr": "QueryContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "QueryContext"
                  }
                }
              ],
              "typeName": "RDF.StringSparqlQueryable"
            }
          },
          "typeParams": []
        }
      }
    ]
  },
  {
    "kind": "module",
    "path": "/namespaces.ts",
    "items": [
      {
        "kind": "variable",
        "name": "dbo",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/dbo.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "DBpedia Ontology\n\n`@dbo: <http://dbpedia.org/ontology/>`"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "dc",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/dc.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Dublin Core Metadata Element Set, Version 1.1\n\n`@dc: <http://purl.org/dc/elements/1.1/>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "dcterms",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/dcterms.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "DCMI Metadata Terms\n\n`@dcterms: <http://purl.org/dc/terms/>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "foaf",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/foaf.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "The Friend of a Friend (FOAF) vocabulary, described using W3C RDF Schema and the Web Ontology Language.\n\n`@foaf: <http://xmlns.com/foaf/0.1/>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "gr",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/gr.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "GoodRelations Ontology\n\n`@gr: <http://purl.org/goodrelations/v1#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "ldkit",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/ldkit.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "LDkit Ontology\n\n`@ldkit: <http://ldkit.io/ontology/>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "owl",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/owl.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "OWL Web Ontology Language\n\n`@owl: <http://www.w3.org/2002/07/owl#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "rdf",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/rdf.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "The RDF Concepts Vocabulary (RDF)\n\n`@rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "rdfs",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/rdfs.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "The RDF Schema vocabulary (RDFS)\n\n`@rdfs: <http://www.w3.org/2000/01/rdf-schema#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "schema",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/schema.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Schema.org vocabulary\n\n`@schema: <http://schema.org/>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "sioc",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/sioc.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SIOC Core Ontology Namespace\n\n`@sioc: <http://rdfs.org/sioc/ns#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "skos",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/skos.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SKOS - Simple Knowledge Organization System\n\n`@skos: <http://www.w3.org/2004/02/skos/core#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "xsd",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/xsd.ts",
          "line": 8,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "XML Schema Definition Language (XSD)\n\n`@xsd: <http://www.w3.org/2001/XMLSchema#>`,"
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "typeAlias",
        "name": "Namespace",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 2,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Original type of namespace specification"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "methods": [],
              "properties": [
                {
                  "name": "iri",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "prefix",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "terms",
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "kind": "typeAlias",
        "name": "NamespaceInterface",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 9,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Resulting type of namespace providing access to all terms, prefix and IRI"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "Term",
                    "constraint": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "terms",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "terms"
                              }
                            }
                          }
                        },
                        "indexType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    }
                  },
                  "tsType": {
                    "repr": "${NamespaceSpec[\"prefix\"]}${Term}",
                    "kind": "literal",
                    "literal": {
                      "kind": "template",
                      "tsTypes": [
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "prefix",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "prefix"
                              }
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "$prefix",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "prefix",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prefix"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "$iri",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "iri",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "iri"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "NamespaceSpec",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "function",
        "name": "createNamespace",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 46,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Creates a strongly typed container for Linked Data vocabulary to provide\ntype safe access to all vocabulary terms as well as IDE autocompletion.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { createNamespace } from \"ldkit\";\n\nconst onto = createNamespace(\n  {\n    iri: \"http://www.example.com/ontology#\",\n    prefix: \"onto:\",\n    terms: [\n      \"object\",\n      \"predicate\",\n      \"subject\",\n    ],\n  } as const,\n);\n\nconsole.log(onto.subject); // prints http://www.example.com/ontology#subject\nconsole.log(onto.unknown); // TypeScript error! This term does not exist\n```\n"
            },
            {
              "kind": "param",
              "name": "namespaceSpec",
              "doc": "Specification of the namespace"
            },
            {
              "kind": "return"
            }
          ]
        },
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "namespaceSpec",
              "optional": false,
              "tsType": {
                "repr": "N",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "N"
                }
              }
            }
          ],
          "returnType": {
            "repr": "NamespaceInterface",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "N",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "N"
                  }
                }
              ],
              "typeName": "NamespaceInterface"
            }
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "N",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "kind": "moduleDoc",
        "name": "",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces.ts",
          "line": 1,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Popular namespaces used in Linked Data, fully compatible with LDkit,\noffering autocompletion and type checking in IDE.\n\nCreate your own namespaces using {@link createNamespace} helper.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { rdf, schema } from \"ldkit/namespaces\";\n\nconsole.log(rdf.type); // \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\nconsole.log(schema.Person); // \"http://schema.org/Person\"\n```\n"
            },
            {
              "kind": "module"
            }
          ]
        }
      }
    ]
  },
  {
    "kind": "module",
    "path": "/rdf.ts",
    "items": [
      {
        "kind": "namespace",
        "name": "N3",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/rdf.ts",
          "line": 11,
          "col": 7
        },
        "declarationKind": "export",
        "namespaceDef": {
          "elements": [
            {
              "kind": "interface",
              "name": "Prefixes",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 7,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [
                  {
                    "readonly": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "tsType": {
                      "repr": "I",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "I"
                      }
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 8,
                      "col": 4
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "I",
                    "default": {
                      "repr": "RDF.NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.NamedNode"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "Term",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 11,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Literal",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Literal"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    },
                    {
                      "repr": "DefaultGraph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "DefaultGraph"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "PrefixedToIri",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 12,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "suffix",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "class",
              "name": "NamedNode",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 14,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "iri",
                        "optional": false,
                        "tsType": {
                          "repr": "Iri",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Iri"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 17,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "NamedNode",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "NamedNode"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 15,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Iri",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Iri"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 16,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "id",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 18,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 19,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Term",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Term"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 20,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "subclass",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "type",
                          "optional": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 21,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.NamedNode]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Iri",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Iri"
                          }
                        }
                      ],
                      "typeName": "[RDF.NamedNode]"
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Iri",
                    "constraint": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "default": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "BlankNode",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 24,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "name",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 28,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "readonly": false,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "nextId",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 25,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "BlankNode",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "BlankNode"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 26,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 27,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "id",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 29,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 30,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Term",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Term"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 31,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "subclass",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "type",
                          "optional": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 32,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.BlankNode]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.BlankNode]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Variable",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 35,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "name",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 38,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "Variable",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Variable"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 36,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 37,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "id",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 39,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 40,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Term",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Term"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 41,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "subclass",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "type",
                          "optional": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 42,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.Variable]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.Variable]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Literal",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 45,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "id",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 56,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "langStringDatatype",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 46,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Literal",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Literal"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 47,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 48,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "id",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 49,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "language",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 53,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "datatype",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 54,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "datatypeString",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 55,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 50,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Term",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Term"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 51,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "subclass",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "type",
                          "optional": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 52,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.Literal]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.Literal]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "DefaultGraph",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 59,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 62,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "DefaultGraph",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "DefaultGraph"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 60,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": ""
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 61,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "id",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 63,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 64,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Term",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Term"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 65,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": true,
                    "name": "subclass",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "type",
                          "optional": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 66,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.DefaultGraph]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.DefaultGraph]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Subject",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 69,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Predicate",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 70,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Object",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 71,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "Literal",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Literal"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Graph",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 72,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "DefaultGraph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "DefaultGraph"
                      }
                    },
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "class",
              "name": "BaseQuad",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 74,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": false,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": false,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": false,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 75,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "Quad",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Quad"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 76,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": ""
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 77,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "subject",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 78,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "predicate",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 79,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "object",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 80,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "graph",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 81,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.BaseQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.BaseQuad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 82,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 83,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.BaseQuad]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.BaseQuad]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Quad",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 86,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": false,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": false,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": false,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 87,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "Quad_Subject",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Subject"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "subject",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 88,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Quad_Predicate",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Predicate"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "predicate",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 89,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Quad_Object",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Object"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "object",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 90,
                      "col": 4
                    }
                  },
                  {
                    "tsType": {
                      "repr": "Quad_Graph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Graph"
                      }
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "graph",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 91,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "equals",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "other",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.BaseQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.BaseQuad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 92,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "toJSON",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 93,
                      "col": 4
                    }
                  }
                ],
                "extends": "BaseQuad",
                "implements": [
                  {
                    "repr": "[RDF.Quad]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.Quad]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Triple",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 96,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [],
                "properties": [],
                "indexSignatures": [],
                "methods": [],
                "extends": "Quad",
                "implements": [
                  {
                    "repr": "[RDF.Quad]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "[RDF.Quad]"
                    }
                  }
                ],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "namespace",
              "name": "DataFactory",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 98,
                "col": 0
              },
              "declarationKind": "export",
              "namespaceDef": {
                "elements": [
                  {
                    "kind": "function",
                    "name": "namedNode",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 99,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "Iri",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Iri"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "NamedNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Iri",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Iri"
                              }
                            }
                          ],
                          "typeName": "NamedNode"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": [
                        {
                          "name": "Iri",
                          "constraint": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          "default": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "function",
                    "name": "blankNode",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 100,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": true,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "BlankNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "BlankNode"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "literal",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 101,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "languageOrDatatype",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "RDF.NamedNode",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.NamedNode"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Literal",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Literal"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "variable",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 102,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Variable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Variable"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "defaultGraph",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 103,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "DefaultGraph",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "DefaultGraph"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "quad",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 104,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad_Subject",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Subject"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad_Predicate",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Predicate"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad_Object",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Object"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "RDF.Quad_Graph",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Graph"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Quad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Quad"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "quad",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 110,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "subject",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "subject"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "object",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "object"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "graph",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "graph"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Q_Out",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Q_Out"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": [
                        {
                          "name": "Q_In",
                          "constraint": {
                            "repr": "RDF.BaseQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.BaseQuad"
                            }
                          },
                          "default": {
                            "repr": "RDF.Quad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad"
                            }
                          }
                        },
                        {
                          "name": "Q_Out",
                          "constraint": {
                            "repr": "BaseQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BaseQuad"
                            }
                          },
                          "default": {
                            "repr": "Quad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Quad"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "function",
                    "name": "triple",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 116,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad_Subject",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Subject"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad_Predicate",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Predicate"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad_Object",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad_Object"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Quad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Quad"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "triple",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 117,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "subject",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "subject"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_In",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_In"
                                }
                              },
                              "indexType": {
                                "repr": "object",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "object"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Q_Out",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Q_Out"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": [
                        {
                          "name": "Q_In",
                          "constraint": {
                            "repr": "RDF.BaseQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.BaseQuad"
                            }
                          },
                          "default": {
                            "repr": "RDF.Quad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad"
                            }
                          }
                        },
                        {
                          "name": "Q_Out",
                          "constraint": {
                            "repr": "BaseQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BaseQuad"
                            }
                          },
                          "default": {
                            "repr": "Quad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Quad"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "ErrorCallback",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 124,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "err",
                        "optional": false,
                        "tsType": {
                          "repr": "Error",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Error"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "result",
                        "optional": false,
                        "tsType": {
                          "repr": "any",
                          "kind": "keyword",
                          "keyword": "any"
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "QuadCallback",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 125,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "result",
                        "optional": false,
                        "tsType": {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "QuadPredicate",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 126,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "result",
                        "optional": false,
                        "tsType": {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "OTerm",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 128,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "RDF.Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Term"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Logger",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 130,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "message",
                        "optional": true,
                        "tsType": {
                          "repr": "any",
                          "kind": "keyword",
                          "keyword": "any"
                        }
                      },
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "optionalParams",
                          "optional": false
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "BlankTriple",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 132,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "predicate",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 133,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        },
                        "indexType": {
                          "repr": "predicate",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "predicate"
                          }
                        }
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "object",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 134,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        },
                        "indexType": {
                          "repr": "object",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "object"
                          }
                        }
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "RDF.BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "RDF.Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Token",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 137,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "type",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 138,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 139,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "line",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 140,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "prefix",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 141,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "LexerOptions",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 143,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "lineMode",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 144,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "n3",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 145,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "comments",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 146,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "TokenCallback",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 149,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "error",
                        "optional": false,
                        "tsType": {
                          "repr": "Error",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Error"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "token",
                        "optional": false,
                        "tsType": {
                          "repr": "Token",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Token"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Lexer",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 151,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "LexerOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "LexerOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 152,
                      "col": 4
                    }
                  }
                ],
                "properties": [],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "tokenize",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "input",
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Token",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Token"
                          }
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 153,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "tokenize",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "input",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "EventEmitter",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "EventEmitter"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "TokenCallback",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "TokenCallback"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 154,
                      "col": 4
                    }
                  }
                ],
                "implements": [],
                "typeParams": [],
                "superTypeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "MimeType",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 158,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "application",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "application"
                      }
                    },
                    {
                      "repr": "example",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "example"
                      }
                    },
                    {
                      "repr": "text",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "text"
                      }
                    },
                    {
                      "repr": "message",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "message"
                      }
                    },
                    {
                      "repr": "multipart",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "multipart"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "BaseFormat",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 167,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Turtle",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Turtle"
                      }
                    },
                    {
                      "repr": "TriG",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "TriG"
                      }
                    },
                    {
                      "repr": "N-Triples",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "N-Triples"
                      }
                    },
                    {
                      "repr": "N-Quads",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "N-Quads"
                      }
                    },
                    {
                      "repr": "N3",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "N3"
                      }
                    },
                    {
                      "repr": "Notation3",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Notation3"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "BaseFormatVariant",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 175,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "BaseFormat",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseFormat"
                      }
                    },
                    {
                      "repr": "Lowercase",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "BaseFormat",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BaseFormat"
                            }
                          }
                        ],
                        "typeName": "Lowercase"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Star",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 179,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "*",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "*"
                      }
                    },
                    {
                      "repr": "star",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "star"
                      }
                    },
                    {
                      "repr": "-star",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "-star"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "MimeSubtype",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 181,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "BaseFormatVariant",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseFormatVariant"
                      }
                    },
                    {
                      "repr": "${BaseFormatVariant}${Star}",
                      "kind": "literal",
                      "literal": {
                        "kind": "template",
                        "tsTypes": [
                          {
                            "repr": "",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": ""
                            }
                          },
                          {
                            "repr": "BaseFormatVariant",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BaseFormatVariant"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": ""
                            }
                          },
                          {
                            "repr": "Star",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Star"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": ""
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "MimeFormat",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 183,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "MimeSubtype",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "MimeSubtype"
                      }
                    },
                    {
                      "repr": "${MimeType}/${MimeSubtype}",
                      "kind": "literal",
                      "literal": {
                        "kind": "template",
                        "tsTypes": [
                          {
                            "repr": "",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": ""
                            }
                          },
                          {
                            "repr": "MimeType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "MimeType"
                            }
                          },
                          {
                            "repr": "/",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "/"
                            }
                          },
                          {
                            "repr": "MimeSubtype",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "MimeSubtype"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": ""
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "ParserOptions",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 185,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "format",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 188,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "MimeFormat",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "MimeFormat"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "factory",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 189,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "RDF.DataFactory",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.DataFactory"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "baseIRI",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 190,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "blankNodePrefix",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 191,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "ParseCallback",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 194,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "error",
                        "optional": false,
                        "tsType": {
                          "repr": "Error",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Error"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "quad",
                        "optional": false,
                        "tsType": {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "prefixes",
                        "optional": false,
                        "tsType": {
                          "repr": "Prefixes",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Prefixes"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "PrefixCallback",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 196,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "prefix",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "prefixNode",
                        "optional": false,
                        "tsType": {
                          "repr": "RDF.NamedNode",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.NamedNode"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Parser",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 198,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "ParserOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "ParserOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 199,
                      "col": 4
                    }
                  }
                ],
                "properties": [],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "parse",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "input",
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": true,
                          "tsType": {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "prefixCallback",
                          "optional": true,
                          "tsType": {
                            "repr": "PrefixCallback",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "PrefixCallback"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 200,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "parse",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "input",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "EventEmitter",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "EventEmitter"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "ParseCallback",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q"
                                  }
                                }
                              ],
                              "typeName": "ParseCallback"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "prefixCallback",
                          "optional": true,
                          "tsType": {
                            "repr": "PrefixCallback",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "PrefixCallback"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 201,
                      "col": 4
                    }
                  }
                ],
                "implements": [],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "StreamParser",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 204,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "ParserOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "ParserOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 207,
                      "col": 4
                    }
                  }
                ],
                "properties": [],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "import",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "stream",
                          "optional": false,
                          "tsType": {
                            "repr": "EventEmitter",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "EventEmitter"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "RDF.Stream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Q",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Q"
                              }
                            }
                          ],
                          "typeName": "RDF.Stream"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 208,
                      "col": 4
                    }
                  }
                ],
                "extends": "stream.Transform",
                "implements": [
                  {
                    "repr": "[RDF.Stream]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        }
                      ],
                      "typeName": "[RDF.Stream]"
                    }
                  },
                  {
                    "repr": "[RDF.Sink]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "EventEmitter",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "EventEmitter"
                          }
                        },
                        {
                          "repr": "RDF.Stream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              }
                            ],
                            "typeName": "RDF.Stream"
                          }
                        }
                      ],
                      "typeName": "[RDF.Sink]"
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ],
                "superTypeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "WriterOptions",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 211,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "format",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 214,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "MimeFormat",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "MimeFormat"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "prefixes",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 215,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Prefixes",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "",
                                "kind": "union",
                                "union": [
                                  {
                                    "repr": "RDF.NamedNode",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "RDF.NamedNode"
                                    }
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  }
                                ]
                              }
                            ],
                            "typeName": "Prefixes"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "end",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 216,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Writer",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 219,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "WriterOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "WriterOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 220,
                      "col": 4
                    }
                  },
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "fd",
                        "optional": false,
                        "tsType": {
                          "repr": "any",
                          "kind": "keyword",
                          "keyword": "any"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "WriterOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "WriterOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 221,
                      "col": 4
                    }
                  }
                ],
                "properties": [],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "quadToString",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "subject",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "subject"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "object",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "object"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "graph",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "graph"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 222,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "quadsToString",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quads",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "RDF.Quad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Quad"
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 223,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addQuad",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "subject",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "subject"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Q",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "Q"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "object",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "object"
                                    }
                                  }
                                }
                              },
                              {
                                "repr": "Array",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "Q",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeName": "Q"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "object",
                                          "kind": "literal",
                                          "literal": {
                                            "kind": "string",
                                            "string": "object"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "Array"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "graph",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "graph"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "done",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [],
                              "typeParams": []
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 224,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addQuad",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quad",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 231,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addQuads",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quads",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "RDF.Quad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Quad"
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 232,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addPrefix",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "prefix",
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "iri",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.NamedNode",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.NamedNode"
                                }
                              },
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "done",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [],
                              "typeParams": []
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 233,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addPrefixes",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "prefixes",
                          "optional": false,
                          "tsType": {
                            "repr": "Prefixes",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "union",
                                  "union": [
                                    {
                                      "repr": "RDF.NamedNode",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.NamedNode"
                                      }
                                    },
                                    {
                                      "repr": "string",
                                      "kind": "keyword",
                                      "keyword": "string"
                                    }
                                  ]
                                }
                              ],
                              "typeName": "Prefixes"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "done",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [],
                              "typeParams": []
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 234,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "end",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "err",
                          "optional": true,
                          "tsType": {
                            "repr": "ErrorCallback",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "ErrorCallback"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "result",
                          "optional": true,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 235,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "blank",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              },
                              "indexType": {
                                "repr": "object",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "object"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "BlankNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "BlankNode"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 236,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "blank",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "triple",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "BlankTriple",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "BlankTriple"
                                }
                              },
                              {
                                "repr": "RDF.Quad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Quad"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "BlankTriple",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "BlankTriple"
                                  }
                                }
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "RDF.Quad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Quad"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "BlankNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "BlankNode"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 237,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "list",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "triple",
                          "optional": false,
                          "tsType": {
                            "repr": "Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "Q",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "Q"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "object",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "object"
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeName": "Array"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Quad_Object",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Quad_Object"
                          }
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 238,
                      "col": 4
                    }
                  }
                ],
                "implements": [],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "RDF.BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "RDF.Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Quad"
                      }
                    }
                  }
                ],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "StreamWriter",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 241,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "WriterOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "WriterOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 244,
                      "col": 4
                    }
                  },
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "fd",
                        "optional": false,
                        "tsType": {
                          "repr": "any",
                          "kind": "keyword",
                          "keyword": "any"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "WriterOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "WriterOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 245,
                      "col": 4
                    }
                  }
                ],
                "properties": [],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "import",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "stream",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Stream",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q"
                                  }
                                }
                              ],
                              "typeName": "RDF.Stream"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "EventEmitter",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EventEmitter"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 246,
                      "col": 4
                    }
                  }
                ],
                "extends": "stream.Transform",
                "implements": [
                  {
                    "repr": "[RDF.Sink]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RDF.Stream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              }
                            ],
                            "typeName": "RDF.Stream"
                          }
                        },
                        {
                          "repr": "EventEmitter",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "EventEmitter"
                          }
                        }
                      ],
                      "typeName": "[RDF.Sink]"
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "RDF.BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "RDF.Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Quad"
                      }
                    }
                  }
                ],
                "superTypeParams": []
              }
            },
            {
              "kind": "class",
              "name": "Store",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 249,
                "col": 0
              },
              "declarationKind": "export",
              "classDef": {
                "isAbstract": false,
                "constructors": [
                  {
                    "name": "constructor",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "triples",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Q_RDF",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Q_RDF"
                            }
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "StoreOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "StoreOptions"
                          }
                        }
                      }
                    ],
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 255,
                      "col": 4
                    }
                  }
                ],
                "properties": [
                  {
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "readonly": true,
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "size",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 256,
                      "col": 4
                    }
                  }
                ],
                "indexSignatures": [],
                "methods": [
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "add",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quad",
                          "optional": false,
                          "tsType": {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "this",
                        "kind": "this",
                        "this": true
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 257,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addQuad",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_RDF",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_RDF"
                                }
                              },
                              "indexType": {
                                "repr": "subject",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "subject"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_RDF",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_RDF"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Q_RDF",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "Q_RDF"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "object",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "object"
                                    }
                                  }
                                }
                              },
                              {
                                "repr": "Array",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "Q_RDF",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeName": "Q_RDF"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "object",
                                          "kind": "literal",
                                          "literal": {
                                            "kind": "string",
                                            "string": "object"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "Array"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_RDF",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_RDF"
                                }
                              },
                              "indexType": {
                                "repr": "graph",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "graph"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "done",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [],
                              "typeParams": []
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 258,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addQuad",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quad",
                          "optional": false,
                          "tsType": {
                            "repr": "Q_RDF",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Q_RDF"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 265,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "addQuads",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quads",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "Q_RDF",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Q_RDF"
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 266,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "delete",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quad",
                          "optional": false,
                          "tsType": {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "this",
                        "kind": "this",
                        "this": true
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 267,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "has",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quad",
                          "optional": false,
                          "tsType": {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 268,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "import",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "stream",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Stream",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q_RDF",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_RDF"
                                  }
                                }
                              ],
                              "typeName": "RDF.Stream"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "EventEmitter",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EventEmitter"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 269,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "removeQuad",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_RDF",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_RDF"
                                }
                              },
                              "indexType": {
                                "repr": "subject",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "subject"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_RDF",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_RDF"
                                }
                              },
                              "indexType": {
                                "repr": "predicate",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "predicate"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Q_RDF",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "Q_RDF"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "object",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "object"
                                    }
                                  }
                                }
                              },
                              {
                                "repr": "Array",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "Q_RDF",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeName": "Q_RDF"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "object",
                                          "kind": "literal",
                                          "literal": {
                                            "kind": "string",
                                            "string": "object"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "Array"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "Q_RDF",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q_RDF"
                                }
                              },
                              "indexType": {
                                "repr": "graph",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "graph"
                                }
                              }
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "done",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [],
                              "typeParams": []
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 270,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "removeQuad",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quad",
                          "optional": false,
                          "tsType": {
                            "repr": "Q_RDF",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Q_RDF"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 277,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "removeQuads",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "quads",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "Q_RDF",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Q_RDF"
                              }
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 278,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "remove",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "stream",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Stream",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q_RDF",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_RDF"
                                  }
                                }
                              ],
                              "typeName": "RDF.Stream"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "EventEmitter",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EventEmitter"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 279,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "removeMatches",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "EventEmitter",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EventEmitter"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 280,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "deleteGraph",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Q_RDF",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "Q_RDF"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "graph",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "graph"
                                    }
                                  }
                                }
                              },
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "EventEmitter",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EventEmitter"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 286,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "getQuads",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OTerm",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "OTerm"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "OTerm",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OTerm"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Quad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Quad"
                          }
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 287,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "readQuads",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OTerm",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "OTerm"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "OTerm",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OTerm"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Iterable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "OutQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "OutQuad"
                              }
                            }
                          ],
                          "typeName": "Iterable"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 288,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "match",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "",
                        "kind": "intersection",
                        "intersection": [
                          {
                            "repr": "RDF.Stream",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q_RDF",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_RDF"
                                  }
                                }
                              ],
                              "typeName": "RDF.Stream"
                            }
                          },
                          {
                            "repr": "RDF.DatasetCore",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                },
                                {
                                  "repr": "InQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "InQuad"
                                  }
                                }
                              ],
                              "typeName": "RDF.DatasetCore"
                            }
                          }
                        ]
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 289,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "countQuads",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 295,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "forEach",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "QuadCallback",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                }
                              ],
                              "typeName": "QuadCallback"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 296,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "every",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "QuadPredicate",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                }
                              ],
                              "typeName": "QuadPredicate"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 297,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "some",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "QuadPredicate",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                }
                              ],
                              "typeName": "QuadPredicate"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 298,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "getSubjects",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                },
                                "indexType": {
                                  "repr": "subject",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "subject"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "Array"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 299,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "forSubjects",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [
                                {
                                  "kind": "identifier",
                                  "name": "result",
                                  "optional": false,
                                  "tsType": {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "Q_N3",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "Q_N3"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "subject",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "subject"
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeParams": []
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 300,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "getPredicates",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                },
                                "indexType": {
                                  "repr": "predicate",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "predicate"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "Array"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 301,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "forPredicates",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [
                                {
                                  "kind": "identifier",
                                  "name": "result",
                                  "optional": false,
                                  "tsType": {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "Q_N3",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "Q_N3"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "predicate",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "predicate"
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeParams": []
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 302,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "getObjects",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                },
                                "indexType": {
                                  "repr": "object",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "object"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "Array"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 303,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "forObjects",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [
                                {
                                  "kind": "identifier",
                                  "name": "result",
                                  "optional": false,
                                  "tsType": {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "Q_N3",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "Q_N3"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "object",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "object"
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeParams": []
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "graph",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 304,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "getGraphs",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Q_N3",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q_N3"
                                  }
                                },
                                "indexType": {
                                  "repr": "graph",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "graph"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "Array"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 305,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "forGraphs",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "callback",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "fnOrConstructor",
                            "fnOrConstructor": {
                              "constructor": false,
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              "params": [
                                {
                                  "kind": "identifier",
                                  "name": "result",
                                  "optional": false,
                                  "tsType": {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "Q_N3",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "Q_N3"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "graph",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "graph"
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeParams": []
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "subject",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "predicate",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "object",
                          "optional": false,
                          "tsType": {
                            "repr": "OTerm",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OTerm"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 306,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "createBlankNode",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "suggestedName",
                          "optional": true,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "BlankNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "BlankNode"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 307,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "extractLists",
                    "kind": "method",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "options",
                          "optional": true,
                          "tsType": {
                            "repr": "extractListOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "extractListOptions"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "Record",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "",
                              "kind": "array",
                              "array": {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              }
                            }
                          ],
                          "typeName": "Record"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 308,
                      "col": 4
                    }
                  },
                  {
                    "optional": false,
                    "isAbstract": false,
                    "isStatic": false,
                    "name": "[Symbol.iterator]",
                    "kind": "method",
                    "functionDef": {
                      "params": [],
                      "returnType": {
                        "repr": "Iterator",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "OutQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "OutQuad"
                              }
                            }
                          ],
                          "typeName": "Iterator"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 309,
                      "col": 4
                    }
                  }
                ],
                "implements": [
                  {
                    "repr": "[RDF.Store]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Q_RDF",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q_RDF"
                          }
                        }
                      ],
                      "typeName": "[RDF.Store]"
                    }
                  },
                  {
                    "repr": "[RDF.DatasetCore]",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "OutQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "OutQuad"
                          }
                        },
                        {
                          "repr": "InQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InQuad"
                          }
                        }
                      ],
                      "typeName": "[RDF.DatasetCore]"
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Q_RDF",
                    "constraint": {
                      "repr": "RDF.BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "RDF.Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Quad"
                      }
                    }
                  },
                  {
                    "name": "Q_N3",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  },
                  {
                    "name": "OutQuad",
                    "constraint": {
                      "repr": "RDF.BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "RDF.Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Quad"
                      }
                    }
                  },
                  {
                    "name": "InQuad",
                    "constraint": {
                      "repr": "RDF.BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "RDF.Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.Quad"
                      }
                    }
                  }
                ],
                "superTypeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "extractListOptions",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 311,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "remove",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 312,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "ignoreErrors",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 313,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "StoreOptions",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 316,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "factory",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 317,
                      "col": 4
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "RDF.DataFactory",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.DataFactory"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "namespace",
              "name": "Util",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 320,
                "col": 0
              },
              "declarationKind": "export",
              "namespaceDef": {
                "elements": [
                  {
                    "kind": "function",
                    "name": "isNamedNode",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 321,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "isBlankNode",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 322,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "isLiteral",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 323,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "isVariable",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 324,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "isDefaultGraph",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 325,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "inDefaultGraph",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 326,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "value",
                          "optional": false,
                          "tsType": {
                            "repr": "RDF.Quad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.Quad"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "prefix",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 327,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "iri",
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "RDF.NamedNode",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.NamedNode"
                                }
                              },
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            ]
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "factory",
                          "optional": true,
                          "tsType": {
                            "repr": "RDF.DataFactory",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.DataFactory"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "PrefixedToIri",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "PrefixedToIri"
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  },
                  {
                    "kind": "function",
                    "name": "prefixes",
                    "location": {
                      "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                      "line": 328,
                      "col": 4
                    },
                    "declarationKind": "export",
                    "functionDef": {
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "defaultPrefixes",
                          "optional": false,
                          "tsType": {
                            "repr": "Prefixes",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "union",
                                  "union": [
                                    {
                                      "repr": "RDF.NamedNode",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.NamedNode"
                                      }
                                    },
                                    {
                                      "repr": "string",
                                      "kind": "keyword",
                                      "keyword": "string"
                                    }
                                  ]
                                }
                              ],
                              "typeName": "Prefixes"
                            }
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "factory",
                          "optional": true,
                          "tsType": {
                            "repr": "RDF.DataFactory",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "RDF.DataFactory"
                            }
                          }
                        }
                      ],
                      "returnType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "PrefixedToIri",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "PrefixedToIri"
                            }
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "prefix",
                              "optional": false,
                              "tsType": {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      },
                      "isAsync": false,
                      "isGenerator": false,
                      "typeParams": []
                    }
                  }
                ]
              }
            },
            {
              "kind": "function",
              "name": "termToId",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 334,
                "col": 0
              },
              "declarationKind": "export",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "term",
                    "optional": false,
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              }
            },
            {
              "kind": "function",
              "name": "termFromId",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 335,
                "col": 0
              },
              "declarationKind": "export",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "id",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "factory",
                    "optional": false,
                    "tsType": {
                      "repr": "RDF.DataFactory",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RDF.DataFactory"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Term",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Term"
                  }
                },
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              }
            },
            {
              "kind": "import",
              "name": "RDF",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 3,
                "col": 0
              },
              "declarationKind": "private",
              "importDef": {
                "src": "https://esm.sh/v135/@rdfjs/types@1.1.0/index.d.ts"
              }
            },
            {
              "kind": "import",
              "name": "EventEmitter",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 4,
                "col": 0
              },
              "declarationKind": "private",
              "importDef": {
                "src": "https://esm.sh/v135/@types/node@18.16.19/events.d.ts",
                "imported": "EventEmitter"
              }
            },
            {
              "kind": "import",
              "name": "stream",
              "location": {
                "filename": "https://esm.sh/v135/@types/n3@1.16.4/index.d.ts",
                "line": 5,
                "col": 0
              },
              "declarationKind": "private",
              "importDef": {
                "src": "https://esm.sh/v135/@types/node@18.16.19/stream.d.ts"
              }
            }
          ]
        }
      },
      {
        "kind": "namespace",
        "name": "RDF",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/rdf.ts",
          "line": 1,
          "col": 12
        },
        "declarationKind": "export",
        "namespaceDef": {
          "elements": [
            {
              "kind": "typeAlias",
              "name": "Term",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 13,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Contains an Iri, RDF blank Node, RDF literal, variable name, default graph, or a quad",
                "tags": [
                  {
                    "kind": "unsupported",
                    "value": "@see NamedNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see BlankNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Literal"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Variable"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see DefaultGraph"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see BaseQuad"
                  }
                ]
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Literal",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Literal"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    },
                    {
                      "repr": "DefaultGraph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "DefaultGraph"
                      }
                    },
                    {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "NamedNode",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 18,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Contains an IRI."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 32,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if other has termType \"NamedNode\" and the same `value`."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 22,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains the constant \"NamedNode\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "NamedNode",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "NamedNode"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 26,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The IRI of the named node (example: `http://example.org/resource`)"
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Iri",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Iri"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "Iri",
                    "constraint": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "default": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "BlankNode",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 38,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Contains an RDF blank node."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 55,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if other has termType \"BlankNode\" and the same `value`."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 42,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains the constant \"BlankNode\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "BlankNode",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "BlankNode"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 49,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Blank node name as a string, without any serialization specific prefixes,\ne.g. when parsing,\nif the data was sourced from Turtle, remove _:,\nif it was sourced from RDF/XML, do not change the blank node name (example: blank3)."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "Literal",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 61,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "An RDF literal, containing a string with an optional language tag and/or datatype."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 86,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if other has termType \"Literal\"\nand the same `value`, `language`, and `datatype`."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 65,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains the constant \"Literal\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Literal",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Literal"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 69,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The text value, unescaped, without language or type (example: Brad Pitt)."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "language",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 75,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "the language as lowercase BCP47 string (examples: en, en-gb)\nor an empty string if the literal has no language.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@link http://tools.ietf.org/html/bcp47"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "datatype",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 79,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "A NamedNode whose IRI represents the datatype of the literal."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "Variable",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 92,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "A variable name."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 106,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if other has termType \"Variable\" and the same `value`."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 96,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains the constant \"Variable\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Variable",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Variable"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 100,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The name of the variable *without* leading ? (example: a)."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "DefaultGraph",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 113,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "An instance of DefaultGraph represents the default graph.\nIt's only allowed to assign a DefaultGraph to the .graph property of a Quad."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 127,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if other has termType \"DefaultGraph\"."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 117,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains the constant \"DefaultGraph\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "DefaultGraph",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "DefaultGraph"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 121,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains an empty string as constant value."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": ""
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Subject",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 136,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "The subject, which is a NamedNode, BlankNode or Variable.",
                "tags": [
                  {
                    "kind": "unsupported",
                    "value": "@see NamedNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see BlankNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Variable"
                  }
                ]
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Predicate",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 143,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "The predicate, which is a NamedNode or Variable.",
                "tags": [
                  {
                    "kind": "unsupported",
                    "value": "@see NamedNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Variable"
                  }
                ]
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Object",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 152,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "The object, which is a NamedNode, Literal, BlankNode or Variable.",
                "tags": [
                  {
                    "kind": "unsupported",
                    "value": "@see NamedNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Literal"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see BlankNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Variable"
                  }
                ]
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "Literal",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Literal"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Quad_Graph",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 161,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "The named graph, which is a DefaultGraph, NamedNode, BlankNode or Variable.",
                "tags": [
                  {
                    "kind": "unsupported",
                    "value": "@see DefaultGraph"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see NamedNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see BlankNode"
                  },
                  {
                    "kind": "unsupported",
                    "value": "@see Variable"
                  }
                ]
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "DefaultGraph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "DefaultGraph"
                      }
                    },
                    {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "NamedNode"
                      }
                    },
                    {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "BaseQuad",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 166,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "An RDF quad, taking any Term in its positions, containing the subject, predicate, object and graph terms."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 201,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if the argument is a) of the same type b) has all components equal."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "termType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 170,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains the constant \"Quad\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Quad",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "Quad"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 174,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Contains an empty string as constant value."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": ""
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "subject",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 180,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The subject.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Subject"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "predicate",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 185,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The predicate.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Predicate"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "object",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 190,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The object.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Object"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "graph",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 195,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The named graph.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Graph"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Term",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Term"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "Quad",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 207,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "An RDF quad, containing the subject, predicate, object and graph terms."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "BaseQuad",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "BaseQuad"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 233,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "The term to compare with."
                        },
                        {
                          "kind": "return",
                          "doc": "True if and only if the argument is a) of the same type b) has all components equal."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "subject",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 212,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The subject.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Subject"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Quad_Subject",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Subject"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "predicate",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 217,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The predicate.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Predicate"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Quad_Predicate",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Predicate"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "object",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 222,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The object.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Object"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Quad_Object",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Object"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "graph",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 227,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "The named graph.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Quad_Graph"
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Quad_Graph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad_Graph"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "DataFactory",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                "line": 239,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "A factory for instantiating RDF terms and quads."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "namedNode",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 245,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "value",
                          "doc": "The IRI for the named node."
                        },
                        {
                          "kind": "return",
                          "doc": "A new instance of NamedNode."
                        },
                        {
                          "kind": "unsupported",
                          "value": "@see NamedNode"
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "Iri",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Iri"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "NamedNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Iri",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Iri"
                            }
                          }
                        ],
                        "typeName": "NamedNode"
                      }
                    },
                    "typeParams": [
                      {
                        "name": "Iri",
                        "constraint": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "default": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  },
                  {
                    "name": "blankNode",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 254,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "value",
                          "doc": "The optional blank node identifier."
                        },
                        {
                          "kind": "return",
                          "doc": "A new instance of BlankNode.\nIf the `value` parameter is undefined a new identifier\nfor the blank node is generated for each call."
                        },
                        {
                          "kind": "unsupported",
                          "value": "@see BlankNode"
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "BlankNode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BlankNode"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "literal",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 266,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "value",
                          "doc": "The literal value."
                        },
                        {
                          "kind": "param",
                          "name": "languageOrDatatype",
                          "doc": "The optional language or datatype.\nIf `languageOrDatatype` is a NamedNode,\nthen it is used for the value of `NamedNode.datatype`.\nOtherwise `languageOrDatatype` is used for the value\nof `NamedNode.language`."
                        },
                        {
                          "kind": "return",
                          "doc": "A new instance of Literal."
                        },
                        {
                          "kind": "unsupported",
                          "value": "@see Literal"
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "languageOrDatatype",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "NamedNode",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "NamedNode"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Literal",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Literal"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "variable",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 274,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "This method is optional.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "value",
                          "doc": "The variable name"
                        },
                        {
                          "kind": "return",
                          "doc": "A new instance of Variable."
                        },
                        {
                          "kind": "unsupported",
                          "value": "@see Variable"
                        }
                      ]
                    },
                    "optional": true,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Variable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Variable"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "defaultGraph",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 279,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "return",
                          "doc": "An instance of DefaultGraph."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "DefaultGraph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "DefaultGraph"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "quad",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/data-model.d.ts",
                      "line": 289,
                      "col": 4
                    },
                    "jsDoc": {
                      "tags": [
                        {
                          "kind": "param",
                          "name": "subject",
                          "doc": "The quad subject term."
                        },
                        {
                          "kind": "param",
                          "name": "predicate",
                          "doc": "The quad predicate term."
                        },
                        {
                          "kind": "param",
                          "name": "object",
                          "doc": "The quad object term."
                        },
                        {
                          "kind": "param",
                          "name": "graph",
                          "doc": "The quad graph term."
                        },
                        {
                          "kind": "return",
                          "doc": "A new instance of Quad."
                        },
                        {
                          "kind": "unsupported",
                          "value": "@see Quad"
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "InQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "InQuad"
                              }
                            },
                            "indexType": {
                              "repr": "subject",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "subject"
                              }
                            }
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "InQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "InQuad"
                              }
                            },
                            "indexType": {
                              "repr": "predicate",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "predicate"
                              }
                            }
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "InQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "InQuad"
                              }
                            },
                            "indexType": {
                              "repr": "object",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "object"
                              }
                            }
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "InQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "InQuad"
                              }
                            },
                            "indexType": {
                              "repr": "graph",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "graph"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "OutQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutQuad"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "OutQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  },
                  {
                    "name": "InQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "OutQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutQuad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Stream",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                "line": 23,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "A quad stream.\nThis stream is only readable, not writable.\n\nEvents:\n* `readable()`:           When a quad can be read from the stream, it will emit this event.\n* `end()`:                This event fires when there will be no more quads to read.\n* `error(error: Error)`:  This event fires if any error occurs. The `message` describes the error.\n* `data(quad: RDF.Quad)`: This event is emitted for every quad that can be read from the stream.\n                          The quad is the content of the data.\nOptional events:\n* prefix(prefix: string, iri: RDF.NamedNode): This event is emitted every time a prefix is mapped to some IRI."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "EventEmitter",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "EventEmitter"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "read",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                      "line": 30,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "This method pulls a quad out of the internal buffer and returns it.\nIf there is no quad available, then it will return null.\n",
                      "tags": [
                        {
                          "kind": "return",
                          "doc": "A quad from the internal buffer, or null if none is available."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Source",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                "line": 40,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "A Source is an object that emits quads.\n\nIt can contain quads but also generate them on the fly.\n\nFor example, parsers and transformations which generate quads can implement the Source interface."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "match",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                      "line": 50,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a stream that processes all quads matching the pattern.\n",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "subject",
                          "doc": "The optional subject."
                        },
                        {
                          "kind": "param",
                          "name": "predicate",
                          "doc": "The optional predicate."
                        },
                        {
                          "kind": "param",
                          "name": "object",
                          "doc": "The optional object."
                        },
                        {
                          "kind": "param",
                          "name": "graph",
                          "doc": "The optional graph."
                        },
                        {
                          "kind": "return",
                          "doc": "The resulting quad stream."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Stream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Q",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "Q"
                            }
                          }
                        ],
                        "typeName": "Stream"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Sink",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                "line": 60,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "A Sink is an object that consumes data from different kinds of streams.\n\nIt can store the content of the stream or do some further processing.\n\nFor example parsers, serializers, transformations and stores can implement the Sink interface."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "import",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                      "line": 71,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Consumes the given stream.\n\nThe `end` and `error` events are used like described in the Stream interface.\nDepending on the use case, subtypes of EventEmitter or Stream are used.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Stream\n"
                        },
                        {
                          "kind": "param",
                          "name": "stream",
                          "doc": "The stream that will be consumed."
                        },
                        {
                          "kind": "return",
                          "doc": "The resulting event emitter."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "stream",
                        "optional": false,
                        "tsType": {
                          "repr": "InputStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InputStream"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "OutputStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutputStream"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "InputStream",
                    "constraint": {
                      "repr": "EventEmitter",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "EventEmitter"
                      }
                    }
                  },
                  {
                    "name": "OutputStream",
                    "constraint": {
                      "repr": "EventEmitter",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "EventEmitter"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Store",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                "line": 82,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "A Store is an object that usually used to persist quads.\n\nThe interface allows removing quads, beside read and write access.\nThe quads can be stored locally or remotely.\n\nAccess to stores LDP or SPARQL endpoints can be implemented with a Store inteface."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "Source",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        }
                      ],
                      "typeName": "Source"
                    }
                  },
                  {
                    "repr": "Sink",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Stream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              }
                            ],
                            "typeName": "Stream"
                          }
                        },
                        {
                          "repr": "EventEmitter",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "EventEmitter"
                          }
                        }
                      ],
                      "typeName": "Sink"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "remove",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                      "line": 92,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Removes all streamed quads.\n\nThe end and error events are used like described in the Stream interface.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Stream\n"
                        },
                        {
                          "kind": "param",
                          "name": "stream",
                          "doc": "The stream that will be consumed."
                        },
                        {
                          "kind": "return",
                          "doc": "The resulting event emitter."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "stream",
                        "optional": false,
                        "tsType": {
                          "repr": "Stream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Q",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Q"
                                }
                              }
                            ],
                            "typeName": "Stream"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "EventEmitter",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "EventEmitter"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "removeMatches",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                      "line": 106,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "All quads matching the pattern will be removed.\n\nThe `end` and `error` events are used like described in the Stream interface.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Stream\n"
                        },
                        {
                          "kind": "param",
                          "name": "subject",
                          "doc": "The optional subject."
                        },
                        {
                          "kind": "param",
                          "name": "predicate",
                          "doc": "The optional predicate."
                        },
                        {
                          "kind": "param",
                          "name": "object",
                          "doc": "The optional object."
                        },
                        {
                          "kind": "param",
                          "name": "graph",
                          "doc": "The optional graph."
                        },
                        {
                          "kind": "return",
                          "doc": "The resulting event emitter."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "EventEmitter",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "EventEmitter"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "deleteGraph",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/stream.d.ts",
                      "line": 118,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Deletes the given named graph.\n\nThe `end` and `error` events are used like described in the Stream interface.",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Stream\n"
                        },
                        {
                          "kind": "param",
                          "name": "graph",
                          "doc": "The graph term or string to match."
                        },
                        {
                          "kind": "return",
                          "doc": "The resulting event emitter."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Q",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Q"
                                  }
                                },
                                "indexType": {
                                  "repr": "graph",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "graph"
                                  }
                                }
                              }
                            },
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "EventEmitter",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "EventEmitter"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "Q",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "DatasetCore",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                "line": 7,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "add",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 18,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Adds the specified quad to the dataset.\n\nExisting quads, as defined in `Quad.equals`, will be ignored."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quad",
                        "optional": false,
                        "tsType": {
                          "repr": "InQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InQuad"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "typeParams": []
                  },
                  {
                    "name": "delete",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 23,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Removes the specified quad from the dataset."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quad",
                        "optional": false,
                        "tsType": {
                          "repr": "InQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InQuad"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "typeParams": []
                  },
                  {
                    "name": "has",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 28,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Determines whether a dataset includes a certain quad."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quad",
                        "optional": false,
                        "tsType": {
                          "repr": "InQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InQuad"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "match",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 45,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n\nThe logic described in {@link https://rdf.js.org/dataset-spec/#quad-matching|Quad Matching} is applied for each\nquad in this dataset to check if it should be included in the output dataset.\n\nThis method always returns a new DatasetCore, even if that dataset contains no quads.\n\nSince a `DatasetCore` is an unordered set, the order of the quads within the returned sequence is arbitrary.\n",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "subject",
                          "doc": "The optional exact subject to match."
                        },
                        {
                          "kind": "param",
                          "name": "predicate",
                          "doc": "The optional exact predicate to match."
                        },
                        {
                          "kind": "param",
                          "name": "object",
                          "doc": "The optional exact object to match."
                        },
                        {
                          "kind": "param",
                          "name": "graph",
                          "doc": "The optional exact graph to match."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "DatasetCore",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "DatasetCore"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "[Symbol.iterator]",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 47,
                      "col": 4
                    },
                    "computed": true,
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "Iterator",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          }
                        ],
                        "typeName": "Iterator"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "size",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 11,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "A non-negative integer that specifies the number of quads in the set."
                    },
                    "params": [],
                    "readonly": true,
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "OutQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  },
                  {
                    "name": "InQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "OutQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutQuad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "DatasetCoreFactory",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                "line": 50,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "dataset",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 54,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new dataset and imports all quads, if given."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quads",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "D",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "D"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "OutQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  },
                  {
                    "name": "InQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "OutQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutQuad"
                      }
                    }
                  },
                  {
                    "name": "D",
                    "constraint": {
                      "repr": "DatasetCore",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "DatasetCore"
                      }
                    },
                    "default": {
                      "repr": "DatasetCore",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "DatasetCore"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Dataset",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                "line": 57,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "DatasetCore",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "OutQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "OutQuad"
                          }
                        },
                        {
                          "repr": "InQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InQuad"
                          }
                        }
                      ],
                      "typeName": "DatasetCore"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "addAll",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 64,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Imports the quads into this dataset.\n\nThis method differs from `Dataset.union` in that it adds all `quads` to the current instance, rather than\ncombining `quads` and the current instance to create a new instance."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quads",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Dataset",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "InQuad",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "InQuad"
                                    }
                                  }
                                ],
                                "typeName": "Dataset"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "array",
                              "array": {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "typeParams": []
                  },
                  {
                    "name": "contains",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 72,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns `true` if the current instance is a superset of the given dataset; differently put: if the given dataset\nis a subset of, is contained in the current dataset.\n\nBlank Nodes will be normalized."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "Dataset",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            ],
                            "typeName": "Dataset"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "deleteMatches",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 85,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "This method removes the quads in the current instance that match the given arguments.\n\nThe logic described in {@link https://rdf.js.org/dataset-spec/#quad-matching|Quad Matching} is applied for each\nquad in this dataset to select the quads which will be deleted.\n",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "subject",
                          "doc": "The optional exact subject to match."
                        },
                        {
                          "kind": "param",
                          "name": "predicate",
                          "doc": "The optional exact predicate to match."
                        },
                        {
                          "kind": "param",
                          "name": "object",
                          "doc": "The optional exact object to match."
                        },
                        {
                          "kind": "param",
                          "name": "graph",
                          "doc": "The optional exact graph to match."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": true,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": true,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": true,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Term"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "typeParams": []
                  },
                  {
                    "name": "difference",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 90,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new dataset that contains all quads from the current dataset, not included in the given dataset."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "Dataset",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            ],
                            "typeName": "Dataset"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 97,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns true if the current instance contains the same graph structure as the given dataset.\n\nBlank Nodes will be normalized."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "Dataset",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            ],
                            "typeName": "Dataset"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "every",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 109,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Universal quantification method, tests whether every quad in the dataset passes the test implemented by the\nprovided `iteratee`.\n\nThis method immediately returns boolean `false` once a quad that does not pass the test is found.\n\nThis method always returns boolean `true` on an empty dataset.\n\nThis method is aligned with `Array.prototype.every()` in ECMAScript-262."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "iteratee",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "quad",
                                "optional": false,
                                "tsType": {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "dataset",
                                "optional": false,
                                "tsType": {
                                  "repr": "this",
                                  "kind": "this",
                                  "this": true
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "filter",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 116,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Creates a new dataset with all the quads that pass the test implemented by the provided `iteratee`.\n\nThis method is aligned with Array.prototype.filter() in ECMAScript-262."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "iteratee",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "quad",
                                "optional": false,
                                "tsType": {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "dataset",
                                "optional": false,
                                "tsType": {
                                  "repr": "this",
                                  "kind": "this",
                                  "this": true
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "forEach",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 123,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Executes the provided `iteratee` once on each quad in the dataset.\n\nThis method is aligned with `Array.prototype.forEach()` in ECMAScript-262."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "callback",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "quad",
                                "optional": false,
                                "tsType": {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "dataset",
                                "optional": false,
                                "tsType": {
                                  "repr": "this",
                                  "kind": "this",
                                  "this": true
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "import",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 130,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Imports all quads from the given stream into the dataset.\n\nThe stream events `end` and `error` are wrapped in a Promise."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "stream",
                        "optional": false,
                        "tsType": {
                          "repr": "Stream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            ],
                            "typeName": "Stream"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "this",
                            "kind": "this",
                            "this": true
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "intersection",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 135,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new dataset containing alls quads from the current dataset that are also included in the given dataset."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "Dataset",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            ],
                            "typeName": "Dataset"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "map",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 140,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new dataset containing all quads returned by applying `iteratee` to each quad in the current dataset."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "iteratee",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "OutQuad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "OutQuad"
                              }
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "quad",
                                "optional": false,
                                "tsType": {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "dataset",
                                "optional": false,
                                "tsType": {
                                  "repr": "Dataset",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "OutQuad",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "OutQuad"
                                        }
                                      }
                                    ],
                                    "typeName": "Dataset"
                                  }
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "reduce",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 151,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "This method calls the `iteratee` on each `quad` of the `Dataset`. The first time the `iteratee` is called, the\n`accumulator` value is the `initialValue` or, if not given, equals to the first quad of the `Dataset`. The return\nvalue of the `iteratee` is used as `accumulator` value for the next calls.\n\nThis method returns the return value of the last `iteratee` call.\n\nThis method is aligned with `Array.prototype.reduce()` in ECMAScript-262."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "callback",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "A",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "A"
                              }
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "accumulator",
                                "optional": false,
                                "tsType": {
                                  "repr": "A",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "A"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "quad",
                                "optional": false,
                                "tsType": {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "dataset",
                                "optional": false,
                                "tsType": {
                                  "repr": "this",
                                  "kind": "this",
                                  "this": true
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "initialValue",
                        "optional": true,
                        "tsType": {
                          "repr": "A",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "A"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "A",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "A"
                      }
                    },
                    "typeParams": [
                      {
                        "name": "A",
                        "default": {
                          "repr": "any",
                          "kind": "keyword",
                          "keyword": "any"
                        }
                      }
                    ]
                  },
                  {
                    "name": "some",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 161,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Existential quantification method, tests whether some quads in the dataset pass the test implemented by the\nprovided `iteratee`.\n\nThis method immediately returns boolean `true` once a quad that passes the test is found.\n\nThis method is aligned with `Array.prototype.some()` in ECMAScript-262."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "iteratee",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "quad",
                                "optional": false,
                                "tsType": {
                                  "repr": "OutQuad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "OutQuad"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "dataset",
                                "optional": false,
                                "tsType": {
                                  "repr": "this",
                                  "kind": "this",
                                  "this": true
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toArray",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 169,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns the set of quads within the dataset as a host language native sequence, for example an `Array` in\nECMAScript-262.\n\nSince a `Dataset` is an unordered set, the order of the quads within the returned sequence is arbitrary."
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "OutQuad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "OutQuad"
                        }
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toCanonical",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 175,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns an N-Quads string representation of the dataset, preprocessed with\n{@link https://json-ld.github.io/normalization/spec/|RDF Dataset Normalization} algorithm."
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toStream",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 180,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a stream that contains all quads of the dataset."
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "Stream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          }
                        ],
                        "typeName": "Stream"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toString",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 188,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns an N-Quads string representation of the dataset.\n\nNo prior normalization is required, therefore the results for the same quads may vary depending on the `Dataset`\nimplementation."
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "union",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 193,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new `Dataset` that is a concatenation of this dataset and the quads given as an argument."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quads",
                        "optional": false,
                        "tsType": {
                          "repr": "Dataset",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            ],
                            "typeName": "Dataset"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "match",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 195,
                      "col": 4
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "subject",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "predicate",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "object",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "graph",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Term"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "OutQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  },
                  {
                    "name": "InQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "OutQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutQuad"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "DatasetFactory",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                "line": 198,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "DatasetCoreFactory",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "OutQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "OutQuad"
                          }
                        },
                        {
                          "repr": "InQuad",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "InQuad"
                          }
                        },
                        {
                          "repr": "D",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "D"
                          }
                        }
                      ],
                      "typeName": "DatasetCoreFactory"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "dataset",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/dataset.d.ts",
                      "line": 203,
                      "col": 4
                    },
                    "jsDoc": {
                      "doc": "Returns a new dataset and imports all quads, if given."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "quads",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Dataset",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "InQuad",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "InQuad"
                                    }
                                  }
                                ],
                                "typeName": "Dataset"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "array",
                              "array": {
                                "repr": "InQuad",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "InQuad"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "D",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "D"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "OutQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "Quad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Quad"
                      }
                    }
                  },
                  {
                    "name": "InQuad",
                    "constraint": {
                      "repr": "BaseQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BaseQuad"
                      }
                    },
                    "default": {
                      "repr": "OutQuad",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OutQuad"
                      }
                    }
                  },
                  {
                    "name": "D",
                    "constraint": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    },
                    "default": {
                      "repr": "Dataset",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OutQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OutQuad"
                            }
                          },
                          {
                            "repr": "InQuad",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "InQuad"
                            }
                          }
                        ],
                        "typeName": "Dataset"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "QuadTermName",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 10,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Helper union type for quad term names."
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "subject",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "subject"
                      }
                    },
                    {
                      "repr": "predicate",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "predicate"
                      }
                    },
                    {
                      "repr": "object",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "object"
                      }
                    },
                    {
                      "repr": "graph",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "graph"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "ResultStream",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 18,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Custom typings for the RDF/JS ResultStream interface as the current\ntypings restrict the generic param Q to extensions of \"BaseQuad\",\nmeaning it cannot be used for Bindings."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "EventEmitter",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "EventEmitter"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "read",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 19,
                      "col": 2
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Q"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "Q"
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "QueryOperationCost",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 25,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "QueryOperationCost represents the cost of a given query operation."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "iterations",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 30,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "An estimation of how many iterations over items are executed.\nThis is used to determine the CPU cost."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "persistedItems",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 35,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "An estimation of how many items are stored in memory.\nThis is used to determine the memory cost."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "blockingItems",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 40,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "An estimation of how many items block the stream.\nThis is used to determine the time the stream is not progressing anymore."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "requestTime",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 45,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "An estimation of the time to request items from sources.\nThis is used to determine the I/O cost."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [
                  {
                    "jsDoc": {
                      "doc": "Custom properties"
                    },
                    "readonly": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 49,
                      "col": 2
                    }
                  }
                ],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "QueryOperationOrder",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 58,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "QueryOperationOrder represents an ordering of the results of a given query operation.\n\nThese objects can represent orderings of both quad and bindings streams,\nrespectively identified by quad term names and variables."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "cost",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 59,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "QueryOperationCost",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryOperationCost"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "terms",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 60,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [
                            {
                              "name": "term",
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "T"
                                }
                              },
                              "typeParams": []
                            },
                            {
                              "name": "direction",
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "",
                                "kind": "union",
                                "union": [
                                  {
                                    "repr": "asc",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "asc"
                                    }
                                  },
                                  {
                                    "repr": "desc",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "desc"
                                    }
                                  }
                                ]
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "T",
                    "constraint": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "QuadTermName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "QuadTermName"
                          }
                        },
                        {
                          "repr": "RDF.Variable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.Variable"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "QueryResultCardinality",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 66,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "QueryResultCardinality represents the number of results, which can either be an estimate or exact value."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "type",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 70,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "indicates the type of counting that was done, and MUST either be \"estimate\" or \"exact\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "estimate",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "estimate"
                          }
                        },
                        {
                          "repr": "exact",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "exact"
                          }
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "value",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 76,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Indicates an estimated of the number of results in the stream if type = \"estimate\",\nor the exact number of results in the stream if type = \"exact\"."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "AllMetadataSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 89,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "CardinalityMetadataSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "CardinalityMetadataSupport"
                      }
                    },
                    {
                      "repr": "OrderMetadataSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "OrderMetadataSupport"
                      }
                    },
                    {
                      "repr": "AvailableOrdersMetadataSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "AvailableOrdersMetadataSupport"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "CardinalityMetadataSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 90,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "cardinality",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "OrderMetadataSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 91,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "order",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "AvailableOrdersMetadataSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 92,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "availableOrders",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "MetadataOpts",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 94,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedMetadataType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedMetadataType"
                            }
                          },
                          "extendsType": {
                            "repr": "CardinalityMetadataSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "CardinalityMetadataSupport"
                            }
                          },
                          "trueType": {
                            "repr": "CardinalityMetadataOpts",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "CardinalityMetadataOpts"
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedMetadataType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedMetadataType"
                            }
                          },
                          "extendsType": {
                            "repr": "OrderMetadataSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OrderMetadataSupport"
                            }
                          },
                          "trueType": {
                            "repr": "OrderMetadataOpts",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OrderMetadataOpts"
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedMetadataType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedMetadataType"
                            }
                          },
                          "extendsType": {
                            "repr": "AvailableOrdersMetadataSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "AvailableOrdersMetadataSupport"
                            }
                          },
                          "trueType": {
                            "repr": "AvailableOrdersMetadataOpts",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "AvailableOrdersMetadataOpts"
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    }
                  ]
                },
                "typeParams": [
                  {
                    "name": "SupportedMetadataType"
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "CardinalityMetadataOpts",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 98,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "cardinality",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 98,
                      "col": 43
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "estimate",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "estimate"
                          }
                        },
                        {
                          "repr": "exact",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "exact"
                          }
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "OrderMetadataOpts",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 99,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "order",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 99,
                      "col": 37
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "AvailableOrdersMetadataOpts",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 100,
                "col": 0
              },
              "declarationKind": "export",
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "availableOrders",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 100,
                      "col": 47
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "ConditionalMetadataType",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 102,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "AdditionalMetadataType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "AdditionalMetadataType"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "M",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "M"
                            }
                          },
                          "extendsType": {
                            "repr": "CardinalityMetadataOpts",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "CardinalityMetadataOpts"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [],
                              "properties": [
                                {
                                  "name": "cardinality",
                                  "params": [],
                                  "computed": false,
                                  "optional": false,
                                  "tsType": {
                                    "repr": "QueryResultCardinality",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "QueryResultCardinality"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "Record",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "Record"
                            }
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "M",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "M"
                            }
                          },
                          "extendsType": {
                            "repr": "OrderMetadataOpts",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OrderMetadataOpts"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [],
                              "properties": [
                                {
                                  "name": "order",
                                  "params": [],
                                  "computed": false,
                                  "optional": false,
                                  "tsType": {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "QueryOperationOrder",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "OrderItemsType",
                                              "kind": "typeRef",
                                              "typeRef": {
                                                "typeName": "OrderItemsType"
                                              }
                                            }
                                          ],
                                          "typeName": "QueryOperationOrder"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "terms",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "terms"
                                        }
                                      }
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "Record",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "Record"
                            }
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "M",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "M"
                            }
                          },
                          "extendsType": {
                            "repr": "AvailableOrdersMetadataOpts",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "AvailableOrdersMetadataOpts"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [],
                              "properties": [
                                {
                                  "name": "availableOrders",
                                  "params": [],
                                  "computed": false,
                                  "optional": false,
                                  "tsType": {
                                    "repr": "",
                                    "kind": "array",
                                    "array": {
                                      "repr": "QueryOperationOrder",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": [
                                          {
                                            "repr": "OrderItemsType",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeName": "OrderItemsType"
                                            }
                                          }
                                        ],
                                        "typeName": "QueryOperationOrder"
                                      }
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "Record",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "Record"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "typeParams": [
                  {
                    "name": "AdditionalMetadataType"
                  },
                  {
                    "name": "M"
                  },
                  {
                    "name": "OrderItemsType",
                    "constraint": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "QuadTermName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "QuadTermName"
                          }
                        },
                        {
                          "repr": "RDF.Variable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.Variable"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "QueryExecuteOptions",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 110,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Options that can be passed when executing a query."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "order",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 114,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The required order for the result stream."
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "QueryOperationOrder",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "OrderItemsType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "OrderItemsType"
                            }
                          }
                        ],
                        "typeName": "QueryOperationOrder"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [
                  {
                    "jsDoc": {
                      "doc": "Custom properties"
                    },
                    "readonly": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 119,
                      "col": 2
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "OrderItemsType",
                    "constraint": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "QuadTermName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "QuadTermName"
                          }
                        },
                        {
                          "repr": "RDF.Variable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.Variable"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "BaseQuery",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 125,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Generic interface that defines query objects following the Future pattern."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "execute",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 135,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Returns either a stream containing all the items that match the given query,\na boolean or void depending on the semantics of the given query."
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "opts",
                        "optional": true,
                        "tsType": {
                          "repr": "any",
                          "kind": "keyword",
                          "keyword": "any"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "ResultStream",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "any",
                                      "kind": "keyword",
                                      "keyword": "any"
                                    }
                                  ],
                                  "typeName": "ResultStream"
                                }
                              },
                              {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ]
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "resultType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 129,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Identifier for the type of result of tis query."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "QueryBindings",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 141,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Query object that returns bindings."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "BaseQuery",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "BaseQuery"
                    }
                  },
                  {
                    "repr": "BaseMetadataQuery",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RDF.Variable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "RDF.Variable"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "methods": [],
                            "properties": [
                              {
                                "name": "variables",
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "",
                                  "kind": "array",
                                  "array": {
                                    "repr": "RDF.Variable",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "RDF.Variable"
                                    }
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        {
                          "repr": "SupportedMetadataType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SupportedMetadataType"
                          }
                        }
                      ],
                      "typeName": "BaseMetadataQuery"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "execute",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 143,
                      "col": 2
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "opts",
                        "optional": true,
                        "tsType": {
                          "repr": "QueryExecuteOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "RDF.Variable",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Variable"
                                }
                              }
                            ],
                            "typeName": "QueryExecuteOptions"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "ResultStream",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Bindings",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "Bindings"
                                  }
                                }
                              ],
                              "typeName": "ResultStream"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "resultType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 142,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "bindings",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "bindings"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "SupportedMetadataType"
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "QueryQuads",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 149,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Query object that returns quads."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "BaseQuery",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "BaseQuery"
                    }
                  },
                  {
                    "repr": "BaseMetadataQuery",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "QuadTermName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "QuadTermName"
                          }
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        },
                        {
                          "repr": "SupportedMetadataType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SupportedMetadataType"
                          }
                        }
                      ],
                      "typeName": "BaseMetadataQuery"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "execute",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 151,
                      "col": 2
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "opts",
                        "optional": true,
                        "tsType": {
                          "repr": "QueryExecuteOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "QuadTermName",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "QuadTermName"
                                }
                              }
                            ],
                            "typeName": "QueryExecuteOptions"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "ResultStream",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "RDF.Quad",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Quad"
                                  }
                                }
                              ],
                              "typeName": "ResultStream"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "resultType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 150,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "quads",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "quads"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "SupportedMetadataType"
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "QueryBoolean",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 157,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Query object that returns a boolean."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "BaseQuery",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "BaseQuery"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "execute",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 159,
                      "col": 2
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "resultType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 158,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "boolean"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "QueryVoid",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 165,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Query object that returns void."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "BaseQuery",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "BaseQuery"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "execute",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 167,
                      "col": 2
                    },
                    "optional": false,
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "resultType",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 166,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "void"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "Query",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 173,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Union type for the different query types."
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "QueryBindings",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "SupportedMetadataType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedMetadataType"
                            }
                          }
                        ],
                        "typeName": "QueryBindings"
                      }
                    },
                    {
                      "repr": "QueryBoolean",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryBoolean"
                      }
                    },
                    {
                      "repr": "QueryQuads",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "SupportedMetadataType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedMetadataType"
                            }
                          }
                        ],
                        "typeName": "QueryQuads"
                      }
                    },
                    {
                      "repr": "QueryVoid",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryVoid"
                      }
                    }
                  ]
                },
                "typeParams": [
                  {
                    "name": "SupportedMetadataType"
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "Bindings",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 184,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Bindings represents the mapping of variables to RDF values using an immutable Map-like representation.\nThis means that methods such as `set` and `delete` do not modify this instance,\nbut they return a new Bindings instance that contains the modification.\n\nBindings instances are created using a BindingsFactory.\n\nThe internal order of variable-value entries is undefined."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "Iterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "tuple",
                          "tuple": [
                            {
                              "repr": "RDF.Variable",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Variable"
                              }
                            },
                            {
                              "repr": "RDF.Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Term"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Iterable"
                    }
                  }
                ],
                "methods": [
                  {
                    "name": "equals",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 239,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Check if all entries contained in this Bindings object are equal to all entries in the other Bindings object.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "A Bindings object."
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "other",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Bindings"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "typeParams": []
                  }
                ],
                "properties": [
                  {
                    "name": "type",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 185,
                      "col": 2
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "bindings",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "bindings"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "has",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 190,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Check if a binding exist for the given variable.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "key",
                          "doc": "A variable term or string. If it is a string, no `?` prefix must be given."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "RDF.Variable",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Variable"
                                  }
                                },
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              ]
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "get",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 195,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Obtain the binding value for the given variable.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "key",
                          "doc": "A variable term or string. If it is a string, no `?` prefix must be given."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "RDF.Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Term"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "RDF.Variable",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Variable"
                                  }
                                },
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              ]
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "set",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 204,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Create a new Bindings object by adding the given variable and value mapping.\n\nIf the variable already exists in the binding, then the existing mapping is overwritten.\n",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "key",
                          "doc": "The variable key term or string. If it is a string, no `?` prefix must be given."
                        },
                        {
                          "kind": "param",
                          "name": "value",
                          "doc": "The value."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "RDF.Variable",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Variable"
                                  }
                                },
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              ]
                            }
                          },
                          {
                            "kind": "identifier",
                            "name": "value",
                            "optional": false,
                            "tsType": {
                              "repr": "RDF.Term",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "RDF.Term"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "delete",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 212,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Create a new Bindings object by removing the given variable.\n\nIf the variable does not exist in the binding, a copy of the Bindings object is returned.\n",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "key",
                          "doc": "The variable key term or string. If it is a string, no `?` prefix must be given."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "RDF.Variable",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Variable"
                                  }
                                },
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              ]
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "keys",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 216,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Obtain all variables for which mappings exist."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Iterable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "RDF.Variable",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Variable"
                                }
                              }
                            ],
                            "typeName": "Iterable"
                          }
                        },
                        "params": [],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "values",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 220,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Obtain all values that are mapped to."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Iterable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "RDF.Term",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "RDF.Term"
                                }
                              }
                            ],
                            "typeName": "Iterable"
                          }
                        },
                        "params": [],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "forEach",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 226,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Iterate over all variable-value pairs.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "fn",
                          "doc": "A callback that is called for each variable-value pair\nwith value as first argument, and variable as second argument."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "fn",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "fnOrConstructor",
                              "fnOrConstructor": {
                                "constructor": false,
                                "tsType": {
                                  "repr": "any",
                                  "kind": "keyword",
                                  "keyword": "any"
                                },
                                "params": [
                                  {
                                    "kind": "identifier",
                                    "name": "value",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Term",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Term"
                                      }
                                    }
                                  },
                                  {
                                    "kind": "identifier",
                                    "name": "key",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Variable",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Variable"
                                      }
                                    }
                                  }
                                ],
                                "typeParams": []
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "size",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 230,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The number of variable-value pairs."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "[Symbol.iterator]",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 234,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Iterator over all variable-value pairs."
                    },
                    "params": [],
                    "computed": true,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Iterator",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "",
                                "kind": "tuple",
                                "tuple": [
                                  {
                                    "repr": "RDF.Variable",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "RDF.Variable"
                                    }
                                  },
                                  {
                                    "repr": "RDF.Term",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "RDF.Term"
                                    }
                                  }
                                ]
                              }
                            ],
                            "typeName": "Iterator"
                          }
                        },
                        "params": [],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "filter",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 245,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Create a new Bindings object by filtering entries using a callback.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "fn",
                          "doc": "A callback that is applied on each entry.\nReturning true indicates that this entry must be contained in the resulting Bindings object."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "fn",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "fnOrConstructor",
                              "fnOrConstructor": {
                                "constructor": false,
                                "tsType": {
                                  "repr": "boolean",
                                  "kind": "keyword",
                                  "keyword": "boolean"
                                },
                                "params": [
                                  {
                                    "kind": "identifier",
                                    "name": "value",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Term",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Term"
                                      }
                                    }
                                  },
                                  {
                                    "kind": "identifier",
                                    "name": "key",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Variable",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Variable"
                                      }
                                    }
                                  }
                                ],
                                "typeParams": []
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "map",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 250,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Create a new Bindings object by mapping entries using a callback.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "fn",
                          "doc": "A callback that is applied on each entry, in which the original value is replaced by the returned value."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "fn",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "fnOrConstructor",
                              "fnOrConstructor": {
                                "constructor": false,
                                "tsType": {
                                  "repr": "RDF.Term",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Term"
                                  }
                                },
                                "params": [
                                  {
                                    "kind": "identifier",
                                    "name": "value",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Term",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Term"
                                      }
                                    }
                                  },
                                  {
                                    "kind": "identifier",
                                    "name": "key",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Variable",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Variable"
                                      }
                                    }
                                  }
                                ],
                                "typeParams": []
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "merge",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 259,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Merge this bindings with another.\n\nIf a merge conflict occurs (this and other have an equal variable with unequal value),\nthen undefined is returned.\n",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "A Bindings object."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Bindings"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "other",
                            "optional": false,
                            "tsType": {
                              "repr": "Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Bindings"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "mergeWith",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 266,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Merge this bindings with another, where merge conflicts can be resolved using a callback function.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "merger",
                          "doc": "A function that is invoked when a merge conflict occurs,\nfor which the returned value is considered the merged value."
                        },
                        {
                          "kind": "param",
                          "name": "other",
                          "doc": "A Bindings object."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "merger",
                            "optional": false,
                            "tsType": {
                              "repr": "",
                              "kind": "fnOrConstructor",
                              "fnOrConstructor": {
                                "constructor": false,
                                "tsType": {
                                  "repr": "RDF.Term",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "RDF.Term"
                                  }
                                },
                                "params": [
                                  {
                                    "kind": "identifier",
                                    "name": "self",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Term",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Term"
                                      }
                                    }
                                  },
                                  {
                                    "kind": "identifier",
                                    "name": "other",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Term",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Term"
                                      }
                                    }
                                  },
                                  {
                                    "kind": "identifier",
                                    "name": "key",
                                    "optional": false,
                                    "tsType": {
                                      "repr": "RDF.Variable",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeName": "RDF.Variable"
                                      }
                                    }
                                  }
                                ],
                                "typeParams": []
                              }
                            }
                          },
                          {
                            "kind": "identifier",
                            "name": "other",
                            "optional": false,
                            "tsType": {
                              "repr": "Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Bindings"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "BindingsFactory",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                "line": 275,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "BindingsFactory can create new instances of Bindings."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "bindings",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 280,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Create a new Bindings object from the given variable-value entries.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "entries",
                          "doc": "An array of entries, where each entry is a tuple containing a variable and a term."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "entries",
                            "optional": true,
                            "tsType": {
                              "repr": "",
                              "kind": "array",
                              "array": {
                                "repr": "",
                                "kind": "tuple",
                                "tuple": [
                                  {
                                    "repr": "RDF.Variable",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "RDF.Variable"
                                    }
                                  },
                                  {
                                    "repr": "RDF.Term",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeName": "RDF.Term"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "fromBindings",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/common.d.ts",
                      "line": 286,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Create a copy of the given bindings object using this factory.",
                      "tags": [
                        {
                          "kind": "param",
                          "name": "bindings",
                          "doc": "A Bindings object."
                        }
                      ]
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Bindings",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "Bindings"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "bindings",
                            "optional": false,
                            "tsType": {
                              "repr": "Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "Bindings"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "QueryContext",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 10,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Context properties provide a way to pass additional bits information to the query engine when executing a query."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "queryTimestamp",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 14,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The date that should be used by SPARQL operations such as NOW()."
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Date"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [
                  {
                    "jsDoc": {
                      "doc": "Other options"
                    },
                    "readonly": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 18,
                      "col": 2
                    }
                  }
                ],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "QueryStringContext",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 24,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Context properties in the case the passed query is a string."
              },
              "interfaceDef": {
                "extends": [
                  {
                    "repr": "QueryContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "QueryContext"
                    }
                  }
                ],
                "methods": [],
                "properties": [
                  {
                    "name": "queryFormat",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 29,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The format in which the query string is defined.\nDefaults to { language: 'sparql', version: '1.1' }"
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "QueryFormat",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryFormat"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "baseIRI",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 33,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The baseIRI for parsing the query."
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "QueryAlgebraContext",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 39,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Context properties in the case the passed query is an algebra object."
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "QueryContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "QueryContext"
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "QuerySourceContext",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 44,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Context properties for engines that can query upon dynamic sets of sources."
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "sources",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 48,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "An array of data sources the query engine must use."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "tuple",
                      "tuple": [
                        {
                          "repr": "SourceType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SourceType"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "rest",
                          "rest": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "SourceType",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeName": "SourceType"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "SourceType"
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "QueryFormat",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 54,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Represents a specific query format"
              },
              "interfaceDef": {
                "extends": [],
                "methods": [],
                "properties": [
                  {
                    "name": "language",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 58,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The query language, e.g. 'sparql'."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "version",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 62,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "The version of the query language, e.g. '1.1'."
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "extensions",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 67,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "An optional array of extensions on the query language.\nThe representation of these extensions is undefined."
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": []
              }
            },
            {
              "kind": "interface",
              "name": "StringQueryable",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 76,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Generic query engine interfaces.\nIt allow engines to return any type of result object for string queries.",
                "tags": [
                  {
                    "kind": "param",
                    "name": "SupportedMetadataType",
                    "doc": "The allowed metadata types."
                  },
                  {
                    "kind": "param",
                    "name": "QueryStringContextType",
                    "doc": "Type of the string-based query context."
                  }
                ]
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "query",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 89,
                      "col": 2
                    },
                    "jsDoc": {
                      "doc": "Initiate a given query provided as a string.\n\nThis will produce a future to a query result, which has to be executed to obtain the query results.\n\nThis can reject given an unsupported or invalid query.\n",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Query"
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "query",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "context",
                        "optional": true,
                        "tsType": {
                          "repr": "QueryStringContextType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "QueryStringContextType"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Query",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "SupportedMetadataType",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "SupportedMetadataType"
                                  }
                                }
                              ],
                              "typeName": "Query"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "SupportedMetadataType"
                  },
                  {
                    "name": "QueryStringContextType",
                    "constraint": {
                      "repr": "QueryStringContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryStringContext"
                      }
                    },
                    "default": {
                      "repr": "QueryStringContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryStringContext"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "interface",
              "name": "AlgebraQueryable",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 99,
                "col": 1
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "Generic query engine interfaces.\nIt allow engines to return any type of result object for Algebra queries.",
                "tags": [
                  {
                    "kind": "param",
                    "name": "AlgebraType",
                    "doc": "The supported algebra types."
                  },
                  {
                    "kind": "param",
                    "name": "SupportedMetadataType",
                    "doc": "The allowed metadata types."
                  },
                  {
                    "kind": "param",
                    "name": "QueryStringContextType",
                    "doc": "Type of the algebra-based query context."
                  }
                ]
              },
              "interfaceDef": {
                "extends": [],
                "methods": [
                  {
                    "name": "query",
                    "kind": "method",
                    "location": {
                      "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                      "line": 113,
                      "col": 1
                    },
                    "jsDoc": {
                      "doc": "Initiate a given query provided as an Algebra object.\n\nThis will produce a future to a query result, which has to be executed to obtain the query results.\n\nThis can reject given an unsupported or invalid query.\n",
                      "tags": [
                        {
                          "kind": "unsupported",
                          "value": "@see Query"
                        }
                      ]
                    },
                    "optional": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "query",
                        "optional": false,
                        "tsType": {
                          "repr": "AlgebraType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "AlgebraType"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "context",
                        "optional": true,
                        "tsType": {
                          "repr": "QueryAlgebraContextType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "QueryAlgebraContextType"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Query",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "SupportedMetadataType",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeName": "SupportedMetadataType"
                                  }
                                }
                              ],
                              "typeName": "Query"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [],
                "typeParams": [
                  {
                    "name": "AlgebraType"
                  },
                  {
                    "name": "SupportedMetadataType"
                  },
                  {
                    "name": "QueryAlgebraContextType",
                    "constraint": {
                      "repr": "QueryAlgebraContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryAlgebraContext"
                      }
                    },
                    "default": {
                      "repr": "QueryAlgebraContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryAlgebraContext"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "StringSparqlQueryable",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 121,
                "col": 0
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "SPARQL-constrained query interface for queries provided as strings.\n\nThis interface guarantees that result objects are of the expected type as defined by the SPARQL spec."
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "unknown",
                      "kind": "keyword",
                      "keyword": "unknown"
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "BindingsResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BindingsResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryBindings",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryStringContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryStringContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "ResultStream",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": [
                                              {
                                                "repr": "Bindings",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeName": "Bindings"
                                                }
                                              }
                                            ],
                                            "typeName": "ResultStream"
                                          }
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "BooleanResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BooleanResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryBoolean",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryStringContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryStringContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "boolean",
                                          "kind": "keyword",
                                          "keyword": "boolean"
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "QuadsResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "QuadsResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryQuads",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryStringContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryStringContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "ResultStream",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": [
                                              {
                                                "repr": "RDF.Quad",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeName": "RDF.Quad"
                                                }
                                              }
                                            ],
                                            "typeName": "ResultStream"
                                          }
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "VoidResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "VoidResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryVoid",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryStringContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryStringContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "void",
                                          "kind": "keyword",
                                          "keyword": "void"
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    }
                  ]
                },
                "typeParams": [
                  {
                    "name": "SupportedResultType"
                  },
                  {
                    "name": "QueryStringContextType",
                    "constraint": {
                      "repr": "QueryStringContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryStringContext"
                      }
                    },
                    "default": {
                      "repr": "QueryStringContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryStringContext"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "AlgebraSparqlQueryable",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 141,
                "col": 1
              },
              "declarationKind": "export",
              "jsDoc": {
                "doc": "SPARQL-constrainted query interface for queries provided as Algebra objects.\n\nThis interface guarantees that result objects are of the expected type as defined by the SPARQL spec."
              },
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "unknown",
                      "kind": "keyword",
                      "keyword": "unknown"
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "BindingsResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BindingsResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryBindings",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "AlgebraType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "AlgebraType"
                                        }
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryAlgebraContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryAlgebraContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "ResultStream",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": [
                                              {
                                                "repr": "Bindings",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeName": "Bindings"
                                                }
                                              }
                                            ],
                                            "typeName": "ResultStream"
                                          }
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "BooleanResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "BooleanResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryBoolean",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "AlgebraType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "AlgebraType"
                                        }
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryAlgebraContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryAlgebraContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "boolean",
                                          "kind": "keyword",
                                          "keyword": "boolean"
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "QuadsResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "QuadsResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryQuads",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "AlgebraType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "AlgebraType"
                                        }
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryAlgebraContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryAlgebraContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "ResultStream",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": [
                                              {
                                                "repr": "RDF.Quad",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeName": "RDF.Quad"
                                                }
                                              }
                                            ],
                                            "typeName": "ResultStream"
                                          }
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "SupportedResultType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "SupportedResultType"
                            }
                          },
                          "extendsType": {
                            "repr": "VoidResultSupport",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeName": "VoidResultSupport"
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "typeLiteral",
                            "typeLiteral": {
                              "methods": [
                                {
                                  "name": "queryVoid",
                                  "kind": "method",
                                  "params": [
                                    {
                                      "kind": "identifier",
                                      "name": "query",
                                      "optional": false,
                                      "tsType": {
                                        "repr": "AlgebraType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "AlgebraType"
                                        }
                                      }
                                    },
                                    {
                                      "kind": "identifier",
                                      "name": "context",
                                      "optional": true,
                                      "tsType": {
                                        "repr": "QueryAlgebraContextType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeName": "QueryAlgebraContextType"
                                        }
                                      }
                                    }
                                  ],
                                  "optional": false,
                                  "returnType": {
                                    "repr": "Promise",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "void",
                                          "kind": "keyword",
                                          "keyword": "void"
                                        }
                                      ],
                                      "typeName": "Promise"
                                    }
                                  },
                                  "typeParams": []
                                }
                              ],
                              "properties": [],
                              "callSignatures": [],
                              "indexSignatures": []
                            }
                          },
                          "falseType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    }
                  ]
                },
                "typeParams": [
                  {
                    "name": "AlgebraType"
                  },
                  {
                    "name": "SupportedResultType"
                  },
                  {
                    "name": "QueryAlgebraContextType",
                    "constraint": {
                      "repr": "QueryAlgebraContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryAlgebraContext"
                      }
                    },
                    "default": {
                      "repr": "QueryAlgebraContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QueryAlgebraContext"
                      }
                    }
                  }
                ]
              }
            },
            {
              "kind": "typeAlias",
              "name": "SparqlResultSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 156,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "BindingsResultSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BindingsResultSupport"
                      }
                    },
                    {
                      "repr": "VoidResultSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "VoidResultSupport"
                      }
                    },
                    {
                      "repr": "QuadsResultSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "QuadsResultSupport"
                      }
                    },
                    {
                      "repr": "BooleanResultSupport",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "BooleanResultSupport"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "BindingsResultSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 157,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bindings",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "VoidResultSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 158,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "void",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "QuadsResultSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 159,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "quads",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            },
            {
              "kind": "typeAlias",
              "name": "BooleanResultSupport",
              "location": {
                "filename": "https://esm.sh/v135/@rdfjs/types@1.1.0/query/queryable.d.ts",
                "line": 160,
                "col": 0
              },
              "declarationKind": "export",
              "typeAliasDef": {
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "boolean",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            }
          ]
        }
      },
      {
        "kind": "moduleDoc",
        "name": "",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/rdf.ts",
          "line": 1,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "RDF utilities\n\nThis module contains a re-export of external RDF libraries that are used\nin LDkit and may be used in tandem with LDkit in Linked Data applications as well.\n\nIncluded packages:\n- [@rdfjs/types](https://github.com/rdfjs/types) [RDF/JS](https://rdf.js.org/) authoritative TypeScript typings\n- [n3](https://rdf.js.org/N3.js/) RDF parser and serializer\n- [rdf-data-factory](https://github.com/rubensworks/rdf-data-factory.js) A TypeScript/JavaScript implementation of the RDF/JS data factory\n- [rdf-literal](https://github.com/rubensworks/rdf-literal.js) Translates between RDF literals and JavaScript primitives",
          "tags": [
            {
              "kind": "module"
            }
          ]
        }
      }
    ]
  },
  {
    "kind": "module",
    "path": "/sparql.ts",
    "items": [
      {
        "kind": "variable",
        "name": "ASK",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 214,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL ASK query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { ASK } from \"ldkit/sparql\";\n\nconst query = ASK`?s ?p ?o`.build();\nconsole.log(query); // ASK { ?s ?p ?o }\n```"
            }
          ]
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "CONSTRUCT",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 193,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL CONSTRUCT query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { CONSTRUCT } from \"ldkit/sparql\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst sNode = df.namedNode(\"http://example.org/datasource\");\nconst pNode = df.namedNode(\"http://example.org/hasSubject\");\n\nconst query = CONSTRUCT`${sNode} ${pNode} ?s`.WHERE`?s ?p ?o`.build();\nconsole.log(query);\n// CONSTRUCT { <http://example.org/datasource> <http://example.org/hasSubject> ?s }\n// WHERE { ?s ?p ?o }\n```"
            }
          ]
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "DESCRIBE",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 245,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL DESCRIBE query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { DESCRIBE } from \"ldkit/sparql\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst node = df.namedNode(\"http://example.org/resource\");\n\nconst query = DESCRIBE`${node}`.build();\nconsole.log(query); // DESCRIBE <http://example.org/resource>\n```"
            }
          ]
        },
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "strings",
                  "optional": false,
                  "tsType": {
                    "repr": "TemplateStringsArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "TemplateStringsArray"
                    }
                  }
                },
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "SparqlValue"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "SELECT",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 158,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL SELECT query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { SELECT } from \"ldkit/sparql\";\n\nconst query = SELECT`?s`.WHERE`?s ?p ?o`.ORDER_BY`?s`.LIMIT(100).build();\nconsole.log(query);\n// SELECT ?s WHERE { ?s ?p ?o } ORDER BY ?s LIMIT 100\n```\n"
            },
            {
              "kind": "example",
              "doc": "```typescript\nimport { SELECT } from \"ldkit/sparql\";\n\nconst query = SELECT.DISTINCT`?s`.WHERE`?s ?p ?o`.build();\nconsole.log(query);\n// SELECT DISTINCT ?s WHERE { ?s ?p ?o }\n```"
            }
          ]
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "DELETE",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_update_builders.ts",
          "line": 125,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL DELETE query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { DELETE } from \"ldkit/sparql\";\nimport { foaf } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst firstName = df.namedNode(foaf.firstName);\n\nconst query = DELETE`?person ${firstName} \"Jean\"`\n  .INSERT`?person ${firstName} \"Paul\"`\n  .WHERE`?person ${firstName} \"Jean\"`\n  .build();\nconsole.log(query);\n// DELETE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n// INSERT { ?person <http://xmlns.com/foaf/0.1/firstName> \"Paul\" }\n// WHERE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n```"
            }
          ]
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "INSERT",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_update_builders.ts",
          "line": 93,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL INSERT query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { INSERT } from \"ldkit/sparql\";\nimport { foaf } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst firstName = df.namedNode(foaf.firstName);\n\nconst query = INSERT`?person ${firstName} \"Paul\"`\n  .WHERE`?person ${firstName} \"Jean\"`\n  .build();\nconsole.log(query);\n// INSERT { ?person <http://xmlns.com/foaf/0.1/firstName> \"Paul\" }\n// WHERE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n```"
            }
          ]
        },
        "variableDef": {
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "WITH",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_update_builders.ts",
          "line": 163,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL WITH query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { DELETE } from \"ldkit/sparql\";\nimport { foaf } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst firstName = df.namedNode(foaf.firstName);\nconst graph = df.namedNode(\"http://example.org/graph\");\n\nconst query = WITH(graph).DELETE`?person ${firstName} \"Jean\"`\n  .INSERT`?person ${firstName} \"Paul\"`\n  .WHERE`?person ${firstName} \"Jean\"`\n  .build();\nconsole.log(query);\n// WITH <http://example.org/graph>\n// DELETE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n// INSERT { ?person <http://xmlns.com/foaf/0.1/firstName> \"Paul\" }\n// WHERE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n```"
            }
          ]
        },
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "stringOrNamedNode",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "RDF.NamedNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          ],
                          "typeName": "RDF.NamedNode"
                        }
                      }
                    ]
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "kind": "typeAlias",
        "name": "SparqlValue",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_tag.ts",
          "line": 9,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Any value that can be used in LDkit SPARQL builders"
        },
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "RDF.Term",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "RDF.Term"
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "Date",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "Date"
                }
              },
              {
                "repr": "Iterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "SparqlValue"
                      }
                    }
                  ],
                  "typeName": "Iterable"
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "build",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          "params": [],
                          "typeParams": []
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "kind": "variable",
        "name": "sparql",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_tag.ts",
          "line": 43,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "A template tag for SPARQL queries or its parts. Automatically converts\nvalues to SPARQL literals and escapes strings as needed.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { sparql } from \"ldkit/sparql\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst quad = df.quad(\n  df.namedNode(\"http://example.org/s\"),\n  df.namedNode(\"http://example.org/p\"),\n  df.literal(\"o\"),\n);\nconst query = sparql`SELECT * WHERE { ${quad} }`;\nconsole.log(query); // SELECT * WHERE { <http://example.org/s> <http://example.org/p> \"o\" . }\n```\n"
            },
            {
              "kind": "param",
              "name": "strings",
              "doc": "{TemplateStringsArray} template strings"
            },
            {
              "kind": "param",
              "name": "values",
              "doc": "{SparqlValue[]}"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "SPARQL query or its part"
            }
          ]
        },
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "strings",
                  "optional": false,
                  "tsType": {
                    "repr": "TemplateStringsArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "TemplateStringsArray"
                    }
                  }
                },
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "SparqlValue"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "kind": "variable",
        "name": "OPTIONAL",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_expression_builders.ts",
          "line": 30,
          "col": 13
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL OPTIONAL expression fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { OPTIONAL } from \"ldkit/sparql\";\n\nconst query = OPTIONAL`?s ?p ?o`.build();\nconsole.log(query); // OPTIONAL { ?s ?p ?o }\n```"
            }
          ]
        },
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "strings",
                  "optional": false,
                  "tsType": {
                    "repr": "TemplateStringsArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "TemplateStringsArray"
                    }
                  }
                },
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "SparqlValue"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "kind": "moduleDoc",
        "name": "",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/sparql.ts",
          "line": 1,
          "col": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL builders that provide a fluent interface for building SPARQL queries\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { SELECT } from \"ldkit/sparql\";\n\nconst query = SELECT`?s ?p ?o`.WHERE`?s ?p ?o`.LIMIT(10).build();\nconsole.log(query); // SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10;\n```\n"
            },
            {
              "kind": "module"
            }
          ]
        }
      }
    ]
  }
]