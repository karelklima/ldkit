[
  {
    "kind": "module",
    "path": "/mod.ts",
    "items": [
      {
        "name": "Options",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
          "line": 16,
          "col": 0,
          "byteIndex": 440
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "LDkit options and query engine context\n\nLDkit-specific options are:\n- `engine` - a query engine to use for querying data sources\n- `language` - a preferred language for literals\n- `take` - a default number of results to take (limit of SELECT queries)\n- `logQuery` - a function that will be called for each SPARQL query"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "engine",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
                        "line": 17,
                        "col": 2,
                        "byteIndex": 466
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "IQueryEngine",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "IQueryEngine"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "language",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
                        "line": 18,
                        "col": 2,
                        "byteIndex": 491
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "take",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
                        "line": 19,
                        "col": 2,
                        "byteIndex": 512
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "logQuery",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
                        "line": 20,
                        "col": 2,
                        "byteIndex": 529
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "query",
                              "optional": false,
                              "tsType": {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "Partial",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  ],
                  "typeName": "Partial"
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "name": "setGlobalOptions",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/options.ts",
          "line": 53,
          "col": 0,
          "byteIndex": 1496
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Sets global configuration {@link Options} for LDkit that will be used\nby default in all queries, unless overridden in {@link Lens}.\n\nLDkit-specific options are:\n- `engine` - a query engine to use for querying data sources\n- `language` - a preferred language for literals\n- `take` - a default number of results to take (limit of SELECT queries)\n- `logQuery` - a function that will be called for each SPARQL query\n\nDefault values for these options are:\n```typescript\nconst defaultOptions = {\n  engine: new QueryEngine(),\n  take: 1000,\n  logQuery: () => {},\n};\n```\nThe default configuration uses built-in {@link QueryEngine}. Language is not set by default.\n",
          "tags": [
            {
              "kind": "param",
              "name": "options",
              "doc": "LDkit options and query engine context"
            }
          ]
        },
        "kind": "function",
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "options",
              "optional": false,
              "tsType": {
                "repr": "Options",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Options"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": []
        }
      },
      {
        "name": "CustomDataTypes",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/data_types.ts",
          "line": 49,
          "col": 0,
          "byteIndex": 1383
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Custom data types definition. Keys are type IRIs, values are JavaScript native types"
        },
        "kind": "interface",
        "interfaceDef": {
          "extends": [],
          "constructors": [],
          "methods": [],
          "properties": [],
          "callSignatures": [],
          "indexSignatures": [],
          "typeParams": []
        }
      },
      {
        "name": "Identity",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 64,
          "col": 0,
          "byteIndex": 1866
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Object that contains IRI of an entity"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "$id",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
                    "line": 65,
                    "col": 2,
                    "byteIndex": 1893
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "IRI",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "IRI"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "name": "Property",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
          "line": 8,
          "col": 0,
          "byteIndex": 292
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Data property prototype that describes RDF predicate of a data entity.\nIncludes specification of other metadata, such as whether the property\nis optional, array, inverse, or whether it is a nested data entity, etc."
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "@id",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 9,
                    "col": 2,
                    "byteIndex": 319
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "@type",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 10,
                    "col": 2,
                    "byteIndex": 336
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "keyof",
                      "tsType": {
                        "repr": "SupportedDataTypes",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SupportedDataTypes"
                        }
                      }
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@schema",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 11,
                    "col": 2,
                    "byteIndex": 374
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "Schema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Schema"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@optional",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 12,
                    "col": 2,
                    "byteIndex": 396
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@array",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 13,
                    "col": 2,
                    "byteIndex": 418
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@multilang",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 14,
                    "col": 2,
                    "byteIndex": 437
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "@inverse",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                    "line": 15,
                    "col": 2,
                    "byteIndex": 460
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "name": "Schema",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
          "line": 22,
          "col": 0,
          "byteIndex": 625
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Data schema prototype that describes a data entity. Includes an optional\nspecification of RDF type and a map of RDF properties."
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "@type",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                        "line": 23,
                        "col": 2,
                        "byteIndex": 650
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [],
                  "callSignatures": [],
                  "indexSignatures": [
                    {
                      "readonly": false,
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "key",
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      ],
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Property",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Property"
                            }
                          },
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/schema.ts",
                        "line": 25,
                        "col": 2,
                        "byteIndex": 696
                      }
                    }
                  ]
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "name": "SchemaInterface",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 74,
          "col": 0,
          "byteIndex": 2136
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Describes a data model of a data entity according to its schema,. as resolved\nby LDkit, i.e. the shape of data that LDkit returns when querying for entities.\n\nSee {@link Lens.prototype.find} for usage example."
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Identity",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Identity"
                }
              },
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "X",
                    "constraint": {
                      "repr": "Exclude",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "keyof",
                              "tsType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              }
                            }
                          },
                          {
                            "repr": "@type",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "@type"
                            }
                          }
                        ],
                        "typeName": "Exclude"
                      }
                    }
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "indexType": {
                            "repr": "X",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "X"
                            }
                          }
                        }
                      },
                      "extendsType": {
                        "repr": "ValidPropertyDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ValidPropertyDefinition"
                        }
                      },
                      "trueType": {
                        "repr": "ConvertProperty",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "T"
                                  }
                                },
                                "indexType": {
                                  "repr": "X",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "X"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "ConvertProperty"
                        }
                      },
                      "falseType": {
                        "repr": "never",
                        "kind": "keyword",
                        "keyword": "never"
                      }
                    }
                  }
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "name": "SchemaSearchInterface",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 152,
          "col": 0,
          "byteIndex": 4762
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Describes a shape of data for updating an entity, according to its data schema.\n\nSee {@link Lens.prototype.find} for usage example."
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "$id",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
                        "line": 154,
                        "col": 4,
                        "byteIndex": 4826
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "IRI",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "IRI"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "IRI",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "IRI"
                              }
                            }
                          }
                        ]
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "SchemaSearchInterfaceProperties",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "SchemaSearchInterfaceProperties"
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "name": "SchemaUpdateInterface",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/interface.ts",
          "line": 116,
          "col": 0,
          "byteIndex": 3608
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Describes a shape of data for updating an entity, according to its data schema.\n\nSee {@link Lens.prototype.update} for usage example."
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Identity",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Identity"
                }
              },
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "X",
                    "constraint": {
                      "repr": "Exclude",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "keyof",
                              "tsType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              }
                            }
                          },
                          {
                            "repr": "@type",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "@type"
                            }
                          }
                        ],
                        "typeName": "Exclude"
                      }
                    }
                  },
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "indexType": {
                            "repr": "X",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "X"
                            }
                          }
                        }
                      },
                      "extendsType": {
                        "repr": "ValidPropertyDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ValidPropertyDefinition"
                        }
                      },
                      "trueType": {
                        "repr": "ConvertUpdateProperty",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "T"
                                  }
                                },
                                "indexType": {
                                  "repr": "X",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "X"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "ConvertUpdateProperty"
                        }
                      },
                      "falseType": {
                        "repr": "never",
                        "kind": "keyword",
                        "keyword": "never"
                      }
                    }
                  }
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "name": "SupportedDataTypes",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/schema/data_types.ts",
          "line": 56,
          "col": 0,
          "byteIndex": 1659
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Map of supported RDF data types and their JavaScript native counterparts,\ncombines default data types with custom data types.\nThe keys are the IRIs of the data types, and the values are the corresponding JavaScript types."
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Omit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "DefaultDataTypes",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "DefaultDataTypes"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "typeOperator",
                      "typeOperator": {
                        "operator": "keyof",
                        "tsType": {
                          "repr": "CustomDataTypes",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CustomDataTypes"
                          }
                        }
                      }
                    }
                  ],
                  "typeName": "Omit"
                }
              },
              {
                "repr": "CustomDataTypes",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CustomDataTypes"
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "name": "registerDataHandler",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/translator.ts",
          "line": 48,
          "col": 0,
          "byteIndex": 1505
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Registers a data type handler for translating between RDF literals and JavaScript values.\n\nIn order to register a custom data type handler, the custom data type TypeScript mapping needs\nto be added to the {@link CustomDataTypes} interface using module augmentation.\n\nTwo handlers are required:\n1) A function to translate from RDF literal value (string) to JavaScript value.\n2) A function to translate from JavaScript value to RDF literal value (string).\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { registerDataHandler } from \"ldkit\";\n\nconst customNumberDataType = \"http://example.org/number\";\n\ndeclare module \"ldkit\" {\n  interface CustomDataTypes {\n    [customNumberDataType]: number;\n  }\n}\n\nregisterDataHandler(\n  customNumberDataType,\n  (literalValue: string) => parseInt(literalValue),\n  (nativeValue: number) => nativeValue.toString(),\n);\n```\n"
            },
            {
              "kind": "param",
              "name": "dataType",
              "doc": "- The data type to register."
            },
            {
              "kind": "param",
              "name": "translateFromRDF",
              "doc": "- Function to translate from RDF literal to JavaScript value."
            },
            {
              "kind": "param",
              "name": "translateToRDF",
              "doc": "- Function to translate from JavaScript value to RDF literal."
            }
          ]
        },
        "kind": "function",
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "dataType",
              "optional": false,
              "tsType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "translateFromRDF",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "",
                    "kind": "indexedAccess",
                    "indexedAccess": {
                      "readonly": false,
                      "objType": {
                        "repr": "SupportedDataTypes",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SupportedDataTypes"
                        }
                      },
                      "indexType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "literalValue",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "typeParams": []
                }
              }
            },
            {
              "kind": "identifier",
              "name": "translateToRDF",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "nativeValue",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "SupportedDataTypes",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "SupportedDataTypes"
                            }
                          },
                          "indexType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "",
                "kind": "typeOperator",
                "typeOperator": {
                  "operator": "keyof",
                  "tsType": {
                    "repr": "SupportedDataTypes",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "SupportedDataTypes"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      {
        "name": "createLens",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
          "line": 75,
          "col": 0,
          "byteIndex": 2430
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Creates an instance of Lens that lets you query and update RDF data\nvia data schema using TypeScript native data types.\n\nIn order to create a Lens instance, you need to provide a data schema\nthat describes the data model which serves to translate data between\nLinked Data and TypeScript native types (see {@link Schema} for details).\n\nYou can also pass a set of options for LDkit and a query engine that\nspecify the data source, preferred language, etc. (see {@link Options} for details).\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { createLens, type Options } from \"ldkit\";\nimport { dbo, rdfs, xsd } from \"ldkit/namespaces\";\n\n// Create options for query engine\nconst options: Options = {\n  sources: [\"https://dbpedia.org/sparql\"], // SPARQL endpoint\n  language: \"en\", // Preferred language\n};\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": dbo.Person,\n  name: rdfs.label,\n  abstract: dbo.abstract,\n  birthDate: {\n    \"@id\": dbo.birthDate,\n    \"@type\": xsd.date,\n  },\n} as const;\n\n// Create a resource using the data schema and options above\nconst Persons = createLens(PersonSchema, options);\n\n// List some persons\nconst persons = await Persons.find({ take: 10 });\nfor (const person of persons) {\n  console.log(person.name); // string\n  console.log(person.birthDate); // Date\n}\n\n// Get a particular person identified by IRI\nconst ada = await Persons.findByIri(\"http://dbpedia.org/resource/Ada_Lovelace\");\nconsole.log(ada?.name); // string \"Ada Lovelace\"\nconsole.log(ada?.birthDate); // Date object of 1815-12-10\n```\n"
            },
            {
              "kind": "param",
              "name": "schema",
              "doc": "data schema which extends {@link Schema}"
            },
            {
              "kind": "param",
              "name": "options",
              "doc": "optional {@link Options} - contains LDkit and query engine configuration"
            },
            {
              "kind": "return",
              "doc": "Lens instance that provides interface to Linked Data based on the schema"
            }
          ]
        },
        "kind": "function",
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "schema",
              "optional": false,
              "tsType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "Options",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Options"
                }
              }
            }
          ],
          "returnType": {
            "repr": "Lens",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                }
              ],
              "typeName": "Lens"
            }
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Schema"
                }
              }
            }
          ]
        }
      },
      {
        "name": "Lens",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
          "line": 87,
          "col": 0,
          "byteIndex": 2742
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Lens provides an interface to Linked Data based on the data schema.\n\nFor the best developer experience, use the {@link createLens} function to create the instance."
        },
        "kind": "class",
        "classDef": {
          "isAbstract": false,
          "constructors": [
            {
              "accessibility": null,
              "hasBody": true,
              "name": "constructor",
              "params": [
                {
                  "kind": "identifier",
                  "name": "schema",
                  "optional": false,
                  "tsType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "Options",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Options"
                    }
                  }
                }
              ],
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 93,
                "col": 2,
                "byteIndex": 2955
              }
            }
          ],
          "properties": [
            {
              "tsType": {
                "repr": "ExpandedSchema",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ExpandedSchema"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "schema",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 88,
                "col": 2,
                "byteIndex": 2782
              }
            },
            {
              "tsType": {
                "repr": "Options",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Options"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "options",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 89,
                "col": 2,
                "byteIndex": 2825
              }
            },
            {
              "tsType": {
                "repr": "QueryEngineProxy",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "QueryEngineProxy"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "engine",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 90,
                "col": 2,
                "byteIndex": 2862
              }
            },
            {
              "tsType": {
                "repr": "QueryBuilder",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "QueryBuilder"
                }
              },
              "readonly": true,
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryBuilder",
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 91,
                "col": 2,
                "byteIndex": 2907
              }
            }
          ],
          "indexSignatures": [],
          "methods": [
            {
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "decode",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "graph",
                    "optional": false,
                    "tsType": {
                      "repr": "Graph",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Graph"
                      }
                    }
                  }
                ],
                "returnType": null,
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 101,
                "col": 2,
                "byteIndex": 3285
              }
            },
            {
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "log",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 107,
                "col": 2,
                "byteIndex": 3430
              }
            },
            {
              "jsDoc": {
                "doc": "Returns the total number of entities corresponding to the data schema.\nOptionally, you can specify search criteria and a maximum number of results to count.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Count all persons\nconst count = await Persons.count(); // number\n\n// Count all persons with name that starts with \"Ada\"\nconst adaCount = await Persons.count({\n  where: {\n    name: { $strStarts: \"Ada\" },\n  },\n});\n\n// Count all persons, but limit the result to 100\nconst limitedCount = await Persons.count({ max: 100 });\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "options",
                    "doc": "Search criteria and maximum number of results to count"
                  },
                  {
                    "kind": "return",
                    "doc": "total number of entities corresponding to the data schema"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "count",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "assign",
                    "left": {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "where",
                              "location": {
                                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                                "line": 147,
                                "col": 4,
                                "byteIndex": 4617
                              },
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "SchemaSearchInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaSearchInterface"
                                }
                              },
                              "typeParams": []
                            },
                            {
                              "name": "max",
                              "location": {
                                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                                "line": 148,
                                "col": 4,
                                "byteIndex": 4655
                              },
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    },
                    "right": "[UNSUPPORTED]",
                    "tsType": null
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 146,
                "col": 2,
                "byteIndex": 4590
              }
            },
            {
              "jsDoc": {
                "doc": "Find entities with a custom SPARQL query.\n\nThe query must be a CONSTRUCT query, and the root nodes must be of type `ldkit:Resource`.\nSo that the decoder can decode the results, the query must also return all properties\naccording to the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { ldkit, schema } from \"ldkit/namespaces\";\nimport { CONSTRUCT } from \"ldkit/sparql\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Query to find all persons named \"Doe\"\nconst query = CONSTRUCT`?s a <${ldkit.Resource}>; <${schema.name}> ?name`\n  .WHERE`?s <${schema.name}> ?name; <${schema.familyName}> \"Doe\"`.build();\n\n// Find all persons that match the custom query\nconst doePersons = await Persons.query(query);\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "sparqlConstructQuery",
                    "doc": "CONSTRUCT SPARQL query"
                  },
                  {
                    "kind": "return",
                    "doc": "Found entities"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "query",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "sparqlConstructQuery",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Unite",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "SchemaInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaInterface"
                                }
                              }
                            ],
                            "typeName": "Unite"
                          }
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 193,
                "col": 2,
                "byteIndex": 6082
              }
            },
            {
              "jsDoc": {
                "doc": "Find entities that match the given search criteria.\n\nThe search criteria is a JSON object that may contain properties from the data schema.\nIn addition you can specify how many results to return and how many to skip\nfor pagination purposes.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Find 100 persons with name that starts with \"Ada\"\nconst persons = await Persons.find({\n  where: {\n    name: { $strStarts: \"Ada\" },\n  },\n  take: 100,\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "options",
                    "doc": "Search criteria and pagination options"
                  },
                  {
                    "kind": "return",
                    "doc": "entities that match the given search criteria"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "find",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "assign",
                    "left": {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "where",
                              "location": {
                                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                                "line": 236,
                                "col": 6,
                                "byteIndex": 7320
                              },
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "",
                                "kind": "union",
                                "union": [
                                  {
                                    "repr": "SchemaSearchInterface",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "T",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "T"
                                          }
                                        }
                                      ],
                                      "typeName": "SchemaSearchInterface"
                                    }
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "",
                                    "kind": "array",
                                    "array": {
                                      "repr": "RDF.Quad",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "RDF.Quad"
                                      }
                                    }
                                  }
                                ]
                              },
                              "typeParams": []
                            },
                            {
                              "name": "take",
                              "location": {
                                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                                "line": 237,
                                "col": 6,
                                "byteIndex": 7382
                              },
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            },
                            {
                              "name": "skip",
                              "location": {
                                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                                "line": 238,
                                "col": 6,
                                "byteIndex": 7403
                              },
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    },
                    "right": "[UNSUPPORTED]",
                    "tsType": null
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Unite",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "SchemaInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaInterface"
                                }
                              }
                            ],
                            "typeName": "Unite"
                          }
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 234,
                "col": 2,
                "byteIndex": 7287
              }
            },
            {
              "jsDoc": {
                "doc": "Find one entity that matches the given search criteria.\n\nThe search criteria is a JSON object that may contain properties from the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Find one person with name that starts with \"Ada\"\nconst person = await Persons.findOne({\n  name: { $strStarts: \"Ada\" },\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "options",
                    "doc": "Search criteria and pagination options"
                  },
                  {
                    "kind": "return",
                    "doc": "entities that match the given search criteria"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "findOne",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "where",
                    "optional": true,
                    "tsType": {
                      "repr": "SchemaSearchInterface",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "SchemaSearchInterface"
                      }
                    }
                  }
                ],
                "returnType": null,
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 285,
                "col": 2,
                "byteIndex": 8773
              }
            },
            {
              "jsDoc": {
                "doc": "Find a single entity that matches the given IRI.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Get a particular person identified by IRI\nconst ada = await Persons.findByIri(\"http://dbpedia.org/resource/Ada_Lovelace\");\nconsole.log(ada?.name); // string \"Ada Lovelace\"\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "iri",
                    "doc": "IRI of the entity to find"
                  },
                  {
                    "kind": "return",
                    "doc": "Entity if found, null otherwise"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "findByIri",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "iri",
                    "optional": false,
                    "tsType": {
                      "repr": "IRI",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "IRI"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Unite",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "SchemaInterface",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      }
                                    ],
                                    "typeName": "SchemaInterface"
                                  }
                                }
                              ],
                              "typeName": "Unite"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 315,
                "col": 2,
                "byteIndex": 9665
              }
            },
            {
              "jsDoc": {
                "doc": "Find entities that match the given IRIs.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Get specific persons identified by IRIs\nconst matches = await Persons.findByIris([\n  \"http://dbpedia.org/resource/Ada_Lovelace\",\n  \"http://dbpedia.org/resource/Alan_Turing\"\n]);\nconsole.log(matches[0].name); // string \"Ada Lovelace\"\nconsole.log(matches[1].name); // string \"Alan Turing\"\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "iris",
                    "doc": "IRIs of the entities to find"
                  },
                  {
                    "kind": "return",
                    "doc": "Array of found entities, empty array if there are no matches"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "findByIris",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "iris",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "IRI",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "IRI"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Unite",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "SchemaInterface",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  ],
                                  "typeName": "SchemaInterface"
                                }
                              }
                            ],
                            "typeName": "Unite"
                          }
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 349,
                "col": 2,
                "byteIndex": 10730
              }
            },
            {
              "accessibility": "private",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "updateQuery",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": null,
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 356,
                "col": 2,
                "byteIndex": 10960
              }
            },
            {
              "jsDoc": {
                "doc": "Inserts one or more entities to the data store.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Insert a new person\nawait Persons.insert({\n  $id: \"http://example.org/Alan_Turing\",\n  name: \"Alan Turing\",\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "entities",
                    "doc": "Entities to insert"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "insert",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "entities",
                      "optional": false,
                      "tsType": null
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "Entity",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "SchemaInterface",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  }
                                ],
                                "typeName": "SchemaInterface"
                              }
                            }
                          ],
                          "typeName": "Entity"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 388,
                "col": 2,
                "byteIndex": 11715
              }
            },
            {
              "jsDoc": {
                "doc": "Inserts raw RDF quads to the data store.\n\nThis method is useful when you need to insert data that is not covered by the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Create a custom quad to insert\nconst df = new DataFactory();\nconst quad = df.quad(\n  df.namedNode(\"http://example.org/Alan_Turing\"),\n  df.namedNode(\"http://schema.org/name\"),\n  df.literal(\"Alan Turing\"),\n);\n\n// Insert the quad\nawait Persons.insertData(quad);\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "quads",
                    "doc": "Quads to insert to the data store"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "insertData",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "quads",
                      "optional": false,
                      "tsType": null
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "RDF.Quad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RDF.Quad"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 428,
                "col": 2,
                "byteIndex": 12849
              }
            },
            {
              "jsDoc": {
                "doc": "Updates one or more entities in the data store.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Update Alan Turing's name\nawait Persons.update({\n  $id: \"http://example.org/Alan_Turing\",\n  name: \"Not Alan Turing\",\n});\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "entities",
                    "doc": "Partial entities to update"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "update",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "entities",
                      "optional": false,
                      "tsType": null
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "SchemaUpdateInterface",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            }
                          ],
                          "typeName": "SchemaUpdateInterface"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 460,
                "col": 2,
                "byteIndex": 13661
              }
            },
            {
              "jsDoc": {
                "doc": "Deletes one or more entities from the data store.\n\nThis method accepts IRIs of the entities to delete and attemps\nto delete all triples from the database that corresponds to\nthe data schema. Other triples that are not covered by the data\nschema will not be deleted.\n\nIf you need to have more control of what triples to delete,\nuse {@link deleteData} instead.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema above\nconst Persons = createLens(PersonSchema);\n\n// Delete a person\nawait Persons.delete(\"http://example.org/Alan_Turing\");\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "identities",
                    "doc": "Identities or IRIs of the entities to delete"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "delete",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "identities",
                      "optional": false,
                      "tsType": null
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Identity",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Identity"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "IRI",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "IRI"
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 497,
                "col": 2,
                "byteIndex": 14804
              }
            },
            {
              "jsDoc": {
                "doc": "Deletes raw RDF quads from the data store.\n\nThis method is useful when you need to delete data that is not covered by the data schema.\n",
                "tags": [
                  {
                    "kind": "example",
                    "doc": "```typescript\nimport { createLens } from \"ldkit\";\nimport { schema } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\n// Create a schema\nconst PersonSchema = {\n  \"@type\": schema.Person,\n  name: schema.name,\n} as const;\n\n// Create a resource using the data schema and context above\nconst Persons = createLens(PersonSchema);\n\n// Create a custom quad to insert\nconst df = new DataFactory();\nconst quad = df.quad(\n  df.namedNode(\"http://example.org/Alan_Turing\"),\n  df.namedNode(\"http://schema.org/name\"),\n  df.literal(\"Alan Turing\"),\n);\n\n// Delete the quad\nawait Persons.deleteData(quad);\n```\n"
                  },
                  {
                    "kind": "param",
                    "name": "quads",
                    "doc": "Quads to delete from the data store"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "deleteData",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "quads",
                      "optional": false,
                      "tsType": null
                    },
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "RDF.Quad",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RDF.Quad"
                        }
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/lens/lens.ts",
                "line": 541,
                "col": 2,
                "byteIndex": 16068
              }
            }
          ],
          "extends": null,
          "implements": [],
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "Schema",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Schema"
                }
              }
            }
          ],
          "superTypeParams": []
        }
      },
      {
        "name": "Namespace",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 2,
          "col": 0,
          "byteIndex": 48
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Original type of namespace specification"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "iri",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                    "line": 3,
                    "col": 2,
                    "byteIndex": 76
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "prefix",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                    "line": 4,
                    "col": 2,
                    "byteIndex": 91
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "terms",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                    "line": 5,
                    "col": 2,
                    "byteIndex": 109
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "name": "NamespaceInterface",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 9,
          "col": 0,
          "byteIndex": 220
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Resulting type of namespace providing access to all terms, prefix and IRI"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "Term",
                    "constraint": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "terms",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "terms"
                              }
                            }
                          }
                        },
                        "indexType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    }
                  },
                  "tsType": {
                    "repr": "${\u001b[0m\u001b[38;5;12mNamespaceSpec\u001b[0m[\u001b[0m\u001b[32m\"prefix\"\u001b[0m]}${\u001b[0m\u001b[38;5;12mTerm\u001b[0m}",
                    "kind": "literal",
                    "literal": {
                      "kind": "template",
                      "tsTypes": [
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "prefix",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "prefix"
                              }
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Term"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "$prefix",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                        "line": 15,
                        "col": 4,
                        "byteIndex": 395
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "prefix",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prefix"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "$iri",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                        "line": 16,
                        "col": 4,
                        "byteIndex": 433
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "iri",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "iri"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "NamespaceSpec",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "name": "createNamespace",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 46,
          "col": 0,
          "byteIndex": 1163
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Creates a strongly typed container for Linked Data vocabulary to provide\ntype safe access to all vocabulary terms as well as IDE autocompletion.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { createNamespace } from \"ldkit\";\n\nconst onto = createNamespace(\n  {\n    iri: \"http://www.example.com/ontology#\",\n    prefix: \"onto:\",\n    terms: [\n      \"object\",\n      \"predicate\",\n      \"subject\",\n    ],\n  } as const,\n);\n\nconsole.log(onto.subject); // prints http://www.example.com/ontology#subject\nconsole.log(onto.unknown); // TypeScript error! This term does not exist\n```\n"
            },
            {
              "kind": "param",
              "name": "namespaceSpec",
              "doc": "Specification of the namespace"
            },
            {
              "kind": "return"
            }
          ]
        },
        "kind": "function",
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "namespaceSpec",
              "optional": false,
              "tsType": {
                "repr": "N",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "N"
                }
              }
            }
          ],
          "returnType": {
            "repr": "NamespaceInterface",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "N",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "N"
                  }
                }
              ],
              "typeName": "NamespaceInterface"
            }
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "N",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "name": "QueryEngine",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
          "line": 22,
          "col": 0,
          "byteIndex": 600
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "A query engine that can query a SPARQL endpoint.\n\nImplements {@link IQueryEngine} interface.\n\nThis engine is used by default if no other engine is configured.\nSee {@link Options} for more details.\n\nIf you need to query other data sources, or multiple SPARQL endpoints,\nyou can use [Comunica](https://comunica.dev) instead, extend this engine,\nor implement your own."
        },
        "kind": "class",
        "classDef": {
          "isAbstract": false,
          "constructors": [],
          "properties": [],
          "indexSignatures": [],
          "methods": [
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "getSparqlEndpoint",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 23,
                "col": 2,
                "byteIndex": 653
              }
            },
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "getFetch",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "fetch",
                  "kind": "typeQuery",
                  "typeQuery": "fetch"
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 57,
                "col": 2,
                "byteIndex": 1759
              }
            },
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "query",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "body",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "requestType",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "application/sparql-query",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "application/sparql-query"
                          }
                        },
                        {
                          "repr": "application/sparql-update",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "application/sparql-update"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "responseType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Response",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Response"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 61,
                "col": 2,
                "byteIndex": 1886
              }
            },
            {
              "accessibility": "protected",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryAndResolve",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "type",
                    "optional": false,
                    "tsType": {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": null,
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": [
                  {
                    "name": "T",
                    "constraint": {
                      "repr": "ResolverType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ResolverType"
                      }
                    }
                  }
                ]
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 79,
                "col": 2,
                "byteIndex": 2368
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL SELECT query and returns a stream of bindings.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Stream of bindings"
                  }
                ]
              },
              "accessibility": "public",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryBindings",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RDF.ResultStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "RDF.Bindings",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "RDF.Bindings"
                              }
                            }
                          ],
                          "typeName": "RDF.ResultStream"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 109,
                "col": 2,
                "byteIndex": 3101
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL ASK query and returns a boolean result.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Boolean result"
                  }
                ]
              },
              "accessibility": "public",
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryBoolean",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 123,
                "col": 2,
                "byteIndex": 3467
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL CONSTRUCT query and returns a stream of quads.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Stream of quads"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryQuads",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RDF.ResultStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "RDF.Quad",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "RDF.Quad"
                              }
                            }
                          ],
                          "typeName": "RDF.ResultStream"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": false,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 137,
                "col": 2,
                "byteIndex": 3816
              }
            },
            {
              "jsDoc": {
                "doc": "Executes a SPARQL UPDATE query and returns nothing.\n",
                "tags": [
                  {
                    "kind": "param",
                    "name": "query",
                    "doc": "SPARQL query string"
                  },
                  {
                    "kind": "param",
                    "name": "context",
                    "doc": "Engine context"
                  },
                  {
                    "kind": "return",
                    "doc": "Nothing"
                  }
                ]
              },
              "accessibility": null,
              "optional": false,
              "isAbstract": false,
              "isStatic": false,
              "name": "queryVoid",
              "kind": "method",
              "functionDef": {
                "params": [
                  {
                    "kind": "identifier",
                    "name": "query",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "context",
                    "optional": true,
                    "tsType": {
                      "repr": "QueryContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QueryContext"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "hasBody": true,
                "isAsync": true,
                "isGenerator": false,
                "typeParams": []
              },
              "location": {
                "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/query_engine.ts",
                "line": 151,
                "col": 2,
                "byteIndex": 4152
              }
            }
          ],
          "extends": null,
          "implements": [
            {
              "repr": "IQueryEngine",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "IQueryEngine"
              }
            }
          ],
          "typeParams": [],
          "superTypeParams": []
        }
      },
      {
        "name": "QueryContext",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/types.ts",
          "line": 24,
          "col": 0,
          "byteIndex": 543
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "A set of context entries that can be passed to a query engine,\nsuch as data sources, fetch configuration, etc.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { QueryContext, QueryEngine } from \"ldkit\";\n\nconst context: QueryContext = {\n  sources: [\"https://dbpedia.org/sparql\"],\n};\n\nconst engine = new QueryEngine();\nawait engine.queryBoolean(\"ASK { ?s ?p ?o }\", context);\n```"
            }
          ]
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "RDF.QueryStringContext",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RDF.QueryStringContext"
                }
              },
              {
                "repr": "RDF.QuerySourceContext",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "QuerySourceUnidentified",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "QuerySourceUnidentified"
                      }
                    }
                  ],
                  "typeName": "RDF.QuerySourceContext"
                }
              },
              {
                "repr": "IQueryContextCommon",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "IQueryContextCommon"
                }
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "name": "IQueryEngine",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/engine/types.ts",
          "line": 32,
          "col": 0,
          "byteIndex": 736
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Interface of a query engine compatible with LDkit"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "RDF.StringSparqlQueryable",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "RDF.SparqlResultSupport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RDF.SparqlResultSupport"
                  }
                },
                {
                  "repr": "QueryContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "QueryContext"
                  }
                }
              ],
              "typeName": "RDF.StringSparqlQueryable"
            }
          },
          "typeParams": []
        }
      }
    ]
  },
  {
    "kind": "module",
    "path": "/namespaces.ts",
    "items": [
      {
        "name": "",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces.ts",
          "line": 1,
          "col": 0,
          "byteIndex": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Popular namespaces used in Linked Data, fully compatible with LDkit,\noffering autocompletion and type checking in IDE.\n\nCreate your own namespaces using {@link createNamespace} helper.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { rdf, schema } from \"ldkit/namespaces\";\n\nconsole.log(rdf.type); // \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\nconsole.log(schema.Person); // \"http://schema.org/Person\"\n```\n"
            },
            {
              "kind": "module"
            }
          ]
        },
        "kind": "moduleDoc"
      },
      {
        "name": "dbo",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/dbo.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 146
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "DBpedia Ontology\n\n`@dbo: <http://dbpedia.org/ontology/>`"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "dc",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/dc.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 179
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Dublin Core Metadata Element Set, Version 1.1\n\n`@dc: <http://purl.org/dc/elements/1.1/>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "dcterms",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/dcterms.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 151
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "DCMI Metadata Terms\n\n`@dcterms: <http://purl.org/dc/terms/>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "foaf",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/foaf.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 233
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "The Friend of a Friend (FOAF) vocabulary, described using W3C RDF Schema and the Web Ontology Language.\n\n`@foaf: <http://xmlns.com/foaf/0.1/>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "gr",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/gr.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 157
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "GoodRelations Ontology\n\n`@gr: <http://purl.org/goodrelations/v1#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "ldkit",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/ldkit.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 144
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "LDkit Ontology\n\n`@ldkit: <http://ldkit.io/ontology/>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "owl",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/owl.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 158
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "OWL Web Ontology Language\n\n`@owl: <http://www.w3.org/2002/07/owl#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "rdf",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/rdf.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 179
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "The RDF Concepts Vocabulary (RDF)\n\n`@rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "rdfs",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/rdfs.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 173
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "The RDF Schema vocabulary (RDFS)\n\n`@rdfs: <http://www.w3.org/2000/01/rdf-schema#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "schema",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/schema.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 145
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Schema.org vocabulary\n\n`@schema: <http://schema.org/>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "sioc",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/sioc.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 156
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SIOC Core Ontology Namespace\n\n`@sioc: <http://rdfs.org/sioc/ns#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "skos",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/skos.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 183
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SKOS - Simple Knowledge Organization System\n\n`@skos: <http://www.w3.org/2004/02/skos/core#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "xsd",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/namespaces/xsd.ts",
          "line": 8,
          "col": 13,
          "byteIndex": 172
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "XML Schema Definition Language (XSD)\n\n`@xsd: <http://www.w3.org/2001/XMLSchema#>`,"
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "Namespace",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 2,
          "col": 0,
          "byteIndex": 48
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Original type of namespace specification"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "iri",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                    "line": 3,
                    "col": 2,
                    "byteIndex": 76
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "prefix",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                    "line": 4,
                    "col": 2,
                    "byteIndex": 91
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "terms",
                  "location": {
                    "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                    "line": 5,
                    "col": 2,
                    "byteIndex": 109
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "typeParams": []
        }
      },
      {
        "name": "NamespaceInterface",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 9,
          "col": 0,
          "byteIndex": 220
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Resulting type of namespace providing access to all terms, prefix and IRI"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "Term",
                    "constraint": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "terms",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "terms"
                              }
                            }
                          }
                        },
                        "indexType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    }
                  },
                  "tsType": {
                    "repr": "${\u001b[0m\u001b[38;5;12mNamespaceSpec\u001b[0m[\u001b[0m\u001b[32m\"prefix\"\u001b[0m]}${\u001b[0m\u001b[38;5;12mTerm\u001b[0m}",
                    "kind": "literal",
                    "literal": {
                      "kind": "template",
                      "tsTypes": [
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "NamespaceSpec",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "NamespaceSpec"
                              }
                            },
                            "indexType": {
                              "repr": "prefix",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "prefix"
                              }
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        },
                        {
                          "repr": "Term",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Term"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": ""
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "$prefix",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                        "line": 15,
                        "col": 4,
                        "byteIndex": 395
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "prefix",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prefix"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "$iri",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
                        "line": 16,
                        "col": 4,
                        "byteIndex": 433
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "NamespaceSpec",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NamespaceSpec"
                            }
                          },
                          "indexType": {
                            "repr": "iri",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "iri"
                            }
                          }
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            ]
          },
          "typeParams": [
            {
              "name": "NamespaceSpec",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      },
      {
        "name": "createNamespace",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/namespace.ts",
          "line": 46,
          "col": 0,
          "byteIndex": 1163
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Creates a strongly typed container for Linked Data vocabulary to provide\ntype safe access to all vocabulary terms as well as IDE autocompletion.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { createNamespace } from \"ldkit\";\n\nconst onto = createNamespace(\n  {\n    iri: \"http://www.example.com/ontology#\",\n    prefix: \"onto:\",\n    terms: [\n      \"object\",\n      \"predicate\",\n      \"subject\",\n    ],\n  } as const,\n);\n\nconsole.log(onto.subject); // prints http://www.example.com/ontology#subject\nconsole.log(onto.unknown); // TypeScript error! This term does not exist\n```\n"
            },
            {
              "kind": "param",
              "name": "namespaceSpec",
              "doc": "Specification of the namespace"
            },
            {
              "kind": "return"
            }
          ]
        },
        "kind": "function",
        "functionDef": {
          "params": [
            {
              "kind": "identifier",
              "name": "namespaceSpec",
              "optional": false,
              "tsType": {
                "repr": "N",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "N"
                }
              }
            }
          ],
          "returnType": {
            "repr": "NamespaceInterface",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "N",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "N"
                  }
                }
              ],
              "typeName": "NamespaceInterface"
            }
          },
          "hasBody": true,
          "isAsync": false,
          "isGenerator": false,
          "typeParams": [
            {
              "name": "N",
              "constraint": {
                "repr": "Namespace",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Namespace"
                }
              }
            }
          ]
        }
      }
    ]
  },
  {
    "kind": "module",
    "path": "/rdf.ts",
    "items": [
      {
        "name": "N3",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/rdf.ts",
          "line": 13,
          "col": 7,
          "byteIndex": 351
        },
        "declarationKind": "export",
        "kind": "namespace",
        "namespaceDef": {
          "elements": []
        }
      },
      {
        "name": "RDF",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/rdf.ts",
          "line": 1,
          "col": 12,
          "byteIndex": 12
        },
        "declarationKind": "export",
        "kind": "namespace",
        "namespaceDef": {
          "elements": []
        }
      },
      {
        "name": "",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/rdf.ts",
          "line": 1,
          "col": 0,
          "byteIndex": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "RDF utilities\n\nThis module contains a re-export of external RDF libraries that are used\nin LDkit and may be used in tandem with LDkit in Linked Data applications as well.\n\nIncluded packages:\n- [@rdfjs/types](https://github.com/rdfjs/types) [RDF/JS](https://rdf.js.org/) authoritative TypeScript typings\n- [n3](https://rdf.js.org/N3.js/) RDF parser and serializer\n- [rdf-data-factory](https://github.com/rubensworks/rdf-data-factory.js) A TypeScript/JavaScript implementation of the RDF/JS data factory\n- [rdf-literal](https://github.com/rubensworks/rdf-literal.js) Translates between RDF literals and JavaScript primitives",
          "tags": [
            {
              "kind": "module"
            }
          ]
        },
        "kind": "moduleDoc"
      }
    ]
  },
  {
    "kind": "module",
    "path": "/sparql.ts",
    "items": [
      {
        "name": "",
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/sparql.ts",
          "line": 1,
          "col": 0,
          "byteIndex": 0
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL builders that provide a fluent interface for building SPARQL queries\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { SELECT } from \"ldkit/sparql\";\n\nconst query = SELECT`?s ?p ?o`.WHERE`?s ?p ?o`.LIMIT(10).build();\nconsole.log(query); // SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10;\n```\n"
            },
            {
              "kind": "module"
            }
          ]
        },
        "kind": "moduleDoc"
      },
      {
        "name": "ASK",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 214,
          "col": 13,
          "byteIndex": 5767
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL ASK query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { ASK } from \"ldkit/sparql\";\n\nconst query = ASK`?s ?p ?o`.build();\nconsole.log(query); // ASK { ?s ?p ?o }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "CONSTRUCT",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 193,
          "col": 13,
          "byteIndex": 5245
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL CONSTRUCT query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { CONSTRUCT } from \"ldkit/sparql\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst sNode = df.namedNode(\"http://example.org/datasource\");\nconst pNode = df.namedNode(\"http://example.org/hasSubject\");\n\nconst query = CONSTRUCT`${sNode} ${pNode} ?s`.WHERE`?s ?p ?o`.build();\nconsole.log(query);\n// CONSTRUCT { <http://example.org/datasource> <http://example.org/hasSubject> ?s }\n// WHERE { ?s ?p ?o }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "DESCRIBE",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 245,
          "col": 13,
          "byteIndex": 6712
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL DESCRIBE query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { DESCRIBE } from \"ldkit/sparql\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst node = df.namedNode(\"http://example.org/resource\");\n\nconst query = DESCRIBE`${node}`.build();\nconsole.log(query); // DESCRIBE <http://example.org/resource>\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "strings",
                  "optional": false,
                  "tsType": {
                    "repr": "TemplateStringsArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TemplateStringsArray"
                    }
                  }
                },
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SparqlValue"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "name": "SELECT",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_query_builders.ts",
          "line": 158,
          "col": 13,
          "byteIndex": 4169
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL SELECT query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { SELECT } from \"ldkit/sparql\";\n\nconst query = SELECT`?s`.WHERE`?s ?p ?o`.ORDER_BY`?s`.LIMIT(100).build();\nconsole.log(query);\n// SELECT ?s WHERE { ?s ?p ?o } ORDER BY ?s LIMIT 100\n```\n"
            },
            {
              "kind": "example",
              "doc": "```typescript\nimport { SELECT } from \"ldkit/sparql\";\n\nconst query = SELECT.DISTINCT`?s`.WHERE`?s ?p ?o`.build();\nconsole.log(query);\n// SELECT DISTINCT ?s WHERE { ?s ?p ?o }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "DELETE",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_update_builders.ts",
          "line": 125,
          "col": 13,
          "byteIndex": 3545
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL DELETE query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { DELETE } from \"ldkit/sparql\";\nimport { foaf } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst firstName = df.namedNode(foaf.firstName);\n\nconst query = DELETE`?person ${firstName} \"Jean\"`\n  .INSERT`?person ${firstName} \"Paul\"`\n  .WHERE`?person ${firstName} \"Jean\"`\n  .build();\nconsole.log(query);\n// DELETE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n// INSERT { ?person <http://xmlns.com/foaf/0.1/firstName> \"Paul\" }\n// WHERE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "INSERT",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_update_builders.ts",
          "line": 93,
          "col": 13,
          "byteIndex": 2551
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL INSERT query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { INSERT } from \"ldkit/sparql\";\nimport { foaf } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst firstName = df.namedNode(foaf.firstName);\n\nconst query = INSERT`?person ${firstName} \"Paul\"`\n  .WHERE`?person ${firstName} \"Jean\"`\n  .build();\nconsole.log(query);\n// INSERT { ?person <http://xmlns.com/foaf/0.1/firstName> \"Paul\" }\n// WHERE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": null,
          "kind": "const"
        }
      },
      {
        "name": "WITH",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_update_builders.ts",
          "line": 163,
          "col": 13,
          "byteIndex": 4788
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL WITH query fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { DELETE } from \"ldkit/sparql\";\nimport { foaf } from \"ldkit/namespaces\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst firstName = df.namedNode(foaf.firstName);\nconst graph = df.namedNode(\"http://example.org/graph\");\n\nconst query = WITH(graph).DELETE`?person ${firstName} \"Jean\"`\n  .INSERT`?person ${firstName} \"Paul\"`\n  .WHERE`?person ${firstName} \"Jean\"`\n  .build();\nconsole.log(query);\n// WITH <http://example.org/graph>\n// DELETE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n// INSERT { ?person <http://xmlns.com/foaf/0.1/firstName> \"Paul\" }\n// WHERE { ?person <http://xmlns.com/foaf/0.1/firstName> \"Jean\" }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "stringOrNamedNode",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "RDF.NamedNode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          ],
                          "typeName": "RDF.NamedNode"
                        }
                      }
                    ]
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "name": "SparqlValue",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_tag.ts",
          "line": 9,
          "col": 0,
          "byteIndex": 207
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "Any value that can be used in LDkit SPARQL builders"
        },
        "kind": "typeAlias",
        "typeAliasDef": {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "RDF.Term",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RDF.Term"
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "Date",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Date"
                }
              },
              {
                "repr": "Iterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SparqlValue"
                      }
                    }
                  ],
                  "typeName": "Iterable"
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "build",
                      "location": {
                        "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_tag.ts",
                        "line": 16,
                        "col": 6,
                        "byteIndex": 321
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          "params": [],
                          "typeParams": []
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "typeParams": []
        }
      },
      {
        "name": "sparql",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_tag.ts",
          "line": 43,
          "col": 13,
          "byteIndex": 1113
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "A template tag for SPARQL queries or its parts. Automatically converts\nvalues to SPARQL literals and escapes strings as needed.\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { sparql } from \"ldkit/sparql\";\nimport { DataFactory } from \"ldkit/rdf\";\n\nconst df = new DataFactory();\nconst quad = df.quad(\n  df.namedNode(\"http://example.org/s\"),\n  df.namedNode(\"http://example.org/p\"),\n  df.literal(\"o\"),\n);\nconst query = sparql`SELECT * WHERE { ${quad} }`;\nconsole.log(query); // SELECT * WHERE { <http://example.org/s> <http://example.org/p> \"o\" . }\n```\n"
            },
            {
              "kind": "param",
              "name": "strings",
              "doc": "{TemplateStringsArray} template strings"
            },
            {
              "kind": "param",
              "name": "values",
              "doc": "{SparqlValue[]}"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "SPARQL query or its part"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "strings",
                  "optional": false,
                  "tsType": {
                    "repr": "TemplateStringsArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TemplateStringsArray"
                    }
                  }
                },
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SparqlValue"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      },
      {
        "name": "OPTIONAL",
        "isDefault": false,
        "location": {
          "filename": "file:///C:/Users/Karel/Projekty/ldkit/library/sparql/sparql_expression_builders.ts",
          "line": 30,
          "col": 13,
          "byteIndex": 712
        },
        "declarationKind": "export",
        "jsDoc": {
          "doc": "SPARQL OPTIONAL expression fluent interface\n",
          "tags": [
            {
              "kind": "example",
              "doc": "```typescript\nimport { OPTIONAL } from \"ldkit/sparql\";\n\nconst query = OPTIONAL`?s ?p ?o`.build();\nconsole.log(query); // OPTIONAL { ?s ?p ?o }\n```"
            }
          ]
        },
        "kind": "variable",
        "variableDef": {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "strings",
                  "optional": false,
                  "tsType": {
                    "repr": "TemplateStringsArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TemplateStringsArray"
                    }
                  }
                },
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SparqlValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SparqlValue"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "kind": "const"
        }
      }
    ]
  }
]
